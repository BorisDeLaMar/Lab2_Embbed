
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bbc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001548  08003d68  08003d68  00013d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b0  080052b0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052b8  080052b8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080052c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000004c0  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004dc  200004dc  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c805  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020db  00000000  00000000  0002c851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002e930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000970  00000000  00000000  0002f398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023acb  00000000  00000000  0002fd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f845  00000000  00000000  000537d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1b40  00000000  00000000  00063018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134b58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028f8  00000000  00000000  00134ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003d50 	.word	0x08003d50

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08003d50 	.word	0x08003d50

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_ldivmod>:
 80001fc:	b97b      	cbnz	r3, 800021e <__aeabi_ldivmod+0x22>
 80001fe:	b972      	cbnz	r2, 800021e <__aeabi_ldivmod+0x22>
 8000200:	2900      	cmp	r1, #0
 8000202:	bfbe      	ittt	lt
 8000204:	2000      	movlt	r0, #0
 8000206:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800020a:	e006      	blt.n	800021a <__aeabi_ldivmod+0x1e>
 800020c:	bf08      	it	eq
 800020e:	2800      	cmpeq	r0, #0
 8000210:	bf1c      	itt	ne
 8000212:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000216:	f04f 30ff 	movne.w	r0, #4294967295
 800021a:	f000 b9bf 	b.w	800059c <__aeabi_idiv0>
 800021e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000222:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000226:	2900      	cmp	r1, #0
 8000228:	db09      	blt.n	800023e <__aeabi_ldivmod+0x42>
 800022a:	2b00      	cmp	r3, #0
 800022c:	db1a      	blt.n	8000264 <__aeabi_ldivmod+0x68>
 800022e:	f000 f84d 	bl	80002cc <__udivmoddi4>
 8000232:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023a:	b004      	add	sp, #16
 800023c:	4770      	bx	lr
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	2b00      	cmp	r3, #0
 8000246:	db1b      	blt.n	8000280 <__aeabi_ldivmod+0x84>
 8000248:	f000 f840 	bl	80002cc <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	4252      	negs	r2, r2
 800025e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000262:	4770      	bx	lr
 8000264:	4252      	negs	r2, r2
 8000266:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026a:	f000 f82f 	bl	80002cc <__udivmoddi4>
 800026e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000272:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000276:	b004      	add	sp, #16
 8000278:	4240      	negs	r0, r0
 800027a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027e:	4770      	bx	lr
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	f000 f821 	bl	80002cc <__udivmoddi4>
 800028a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000292:	b004      	add	sp, #16
 8000294:	4252      	negs	r2, r2
 8000296:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b974 	b.w	800059c <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d0:	9d08      	ldr	r5, [sp, #32]
 80002d2:	4604      	mov	r4, r0
 80002d4:	468e      	mov	lr, r1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d14d      	bne.n	8000376 <__udivmoddi4+0xaa>
 80002da:	428a      	cmp	r2, r1
 80002dc:	4694      	mov	ip, r2
 80002de:	d969      	bls.n	80003b4 <__udivmoddi4+0xe8>
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	b152      	cbz	r2, 80002fc <__udivmoddi4+0x30>
 80002e6:	fa01 f302 	lsl.w	r3, r1, r2
 80002ea:	f1c2 0120 	rsb	r1, r2, #32
 80002ee:	fa20 f101 	lsr.w	r1, r0, r1
 80002f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f6:	ea41 0e03 	orr.w	lr, r1, r3
 80002fa:	4094      	lsls	r4, r2
 80002fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000300:	0c21      	lsrs	r1, r4, #16
 8000302:	fbbe f6f8 	udiv	r6, lr, r8
 8000306:	fa1f f78c 	uxth.w	r7, ip
 800030a:	fb08 e316 	mls	r3, r8, r6, lr
 800030e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000312:	fb06 f107 	mul.w	r1, r6, r7
 8000316:	4299      	cmp	r1, r3
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x64>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 811f 	bcs.w	8000564 <__udivmoddi4+0x298>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 811c 	bls.w	8000564 <__udivmoddi4+0x298>
 800032c:	3e02      	subs	r6, #2
 800032e:	4463      	add	r3, ip
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 f707 	mul.w	r7, r0, r7
 8000344:	42a7      	cmp	r7, r4
 8000346:	d90a      	bls.n	800035e <__udivmoddi4+0x92>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000350:	f080 810a 	bcs.w	8000568 <__udivmoddi4+0x29c>
 8000354:	42a7      	cmp	r7, r4
 8000356:	f240 8107 	bls.w	8000568 <__udivmoddi4+0x29c>
 800035a:	4464      	add	r4, ip
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000362:	1be4      	subs	r4, r4, r7
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa4>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xc2>
 800037a:	2d00      	cmp	r5, #0
 800037c:	f000 80ef 	beq.w	800055e <__udivmoddi4+0x292>
 8000380:	2600      	movs	r6, #0
 8000382:	e9c5 0100 	strd	r0, r1, [r5]
 8000386:	4630      	mov	r0, r6
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f683 	clz	r6, r3
 8000392:	2e00      	cmp	r6, #0
 8000394:	d14a      	bne.n	800042c <__udivmoddi4+0x160>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd4>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80f9 	bhi.w	8000592 <__udivmoddi4+0x2c6>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	469e      	mov	lr, r3
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa4>
 80003ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa4>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xec>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 8092 	bne.w	80004e6 <__udivmoddi4+0x21a>
 80003c2:	eba1 010c 	sub.w	r1, r1, ip
 80003c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	2601      	movs	r6, #1
 80003d0:	0c20      	lsrs	r0, r4, #16
 80003d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80003d6:	fb07 1113 	mls	r1, r7, r3, r1
 80003da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003de:	fb0e f003 	mul.w	r0, lr, r3
 80003e2:	4288      	cmp	r0, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x12c>
 80003e6:	eb1c 0101 	adds.w	r1, ip, r1
 80003ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x12a>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f200 80cb 	bhi.w	800058c <__udivmoddi4+0x2c0>
 80003f6:	4643      	mov	r3, r8
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000400:	fb07 1110 	mls	r1, r7, r0, r1
 8000404:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000408:	fb0e fe00 	mul.w	lr, lr, r0
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x156>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f100 31ff 	add.w	r1, r0, #4294967295
 8000418:	d202      	bcs.n	8000420 <__udivmoddi4+0x154>
 800041a:	45a6      	cmp	lr, r4
 800041c:	f200 80bb 	bhi.w	8000596 <__udivmoddi4+0x2ca>
 8000420:	4608      	mov	r0, r1
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042a:	e79c      	b.n	8000366 <__udivmoddi4+0x9a>
 800042c:	f1c6 0720 	rsb	r7, r6, #32
 8000430:	40b3      	lsls	r3, r6
 8000432:	fa22 fc07 	lsr.w	ip, r2, r7
 8000436:	ea4c 0c03 	orr.w	ip, ip, r3
 800043a:	fa20 f407 	lsr.w	r4, r0, r7
 800043e:	fa01 f306 	lsl.w	r3, r1, r6
 8000442:	431c      	orrs	r4, r3
 8000444:	40f9      	lsrs	r1, r7
 8000446:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044a:	fa00 f306 	lsl.w	r3, r0, r6
 800044e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000452:	0c20      	lsrs	r0, r4, #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fb09 1118 	mls	r1, r9, r8, r1
 800045c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000460:	fb08 f00e 	mul.w	r0, r8, lr
 8000464:	4288      	cmp	r0, r1
 8000466:	fa02 f206 	lsl.w	r2, r2, r6
 800046a:	d90b      	bls.n	8000484 <__udivmoddi4+0x1b8>
 800046c:	eb1c 0101 	adds.w	r1, ip, r1
 8000470:	f108 3aff 	add.w	sl, r8, #4294967295
 8000474:	f080 8088 	bcs.w	8000588 <__udivmoddi4+0x2bc>
 8000478:	4288      	cmp	r0, r1
 800047a:	f240 8085 	bls.w	8000588 <__udivmoddi4+0x2bc>
 800047e:	f1a8 0802 	sub.w	r8, r8, #2
 8000482:	4461      	add	r1, ip
 8000484:	1a09      	subs	r1, r1, r0
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb1 f0f9 	udiv	r0, r1, r9
 800048c:	fb09 1110 	mls	r1, r9, r0, r1
 8000490:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000494:	fb00 fe0e 	mul.w	lr, r0, lr
 8000498:	458e      	cmp	lr, r1
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1e2>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a4:	d26c      	bcs.n	8000580 <__udivmoddi4+0x2b4>
 80004a6:	458e      	cmp	lr, r1
 80004a8:	d96a      	bls.n	8000580 <__udivmoddi4+0x2b4>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4461      	add	r1, ip
 80004ae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b2:	fba0 9402 	umull	r9, r4, r0, r2
 80004b6:	eba1 010e 	sub.w	r1, r1, lr
 80004ba:	42a1      	cmp	r1, r4
 80004bc:	46c8      	mov	r8, r9
 80004be:	46a6      	mov	lr, r4
 80004c0:	d356      	bcc.n	8000570 <__udivmoddi4+0x2a4>
 80004c2:	d053      	beq.n	800056c <__udivmoddi4+0x2a0>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x212>
 80004c6:	ebb3 0208 	subs.w	r2, r3, r8
 80004ca:	eb61 010e 	sbc.w	r1, r1, lr
 80004ce:	fa01 f707 	lsl.w	r7, r1, r7
 80004d2:	fa22 f306 	lsr.w	r3, r2, r6
 80004d6:	40f1      	lsrs	r1, r6
 80004d8:	431f      	orrs	r7, r3
 80004da:	e9c5 7100 	strd	r7, r1, [r5]
 80004de:	2600      	movs	r6, #0
 80004e0:	4631      	mov	r1, r6
 80004e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e6:	f1c2 0320 	rsb	r3, r2, #32
 80004ea:	40d8      	lsrs	r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa21 f303 	lsr.w	r3, r1, r3
 80004f4:	4091      	lsls	r1, r2
 80004f6:	4301      	orrs	r1, r0
 80004f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004fc:	fa1f fe8c 	uxth.w	lr, ip
 8000500:	fbb3 f0f7 	udiv	r0, r3, r7
 8000504:	fb07 3610 	mls	r6, r7, r0, r3
 8000508:	0c0b      	lsrs	r3, r1, #16
 800050a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800050e:	fb00 f60e 	mul.w	r6, r0, lr
 8000512:	429e      	cmp	r6, r3
 8000514:	fa04 f402 	lsl.w	r4, r4, r2
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x260>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000522:	d22f      	bcs.n	8000584 <__udivmoddi4+0x2b8>
 8000524:	429e      	cmp	r6, r3
 8000526:	d92d      	bls.n	8000584 <__udivmoddi4+0x2b8>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1b9b      	subs	r3, r3, r6
 800052e:	b289      	uxth	r1, r1
 8000530:	fbb3 f6f7 	udiv	r6, r3, r7
 8000534:	fb07 3316 	mls	r3, r7, r6, r3
 8000538:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053c:	fb06 f30e 	mul.w	r3, r6, lr
 8000540:	428b      	cmp	r3, r1
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x28a>
 8000544:	eb1c 0101 	adds.w	r1, ip, r1
 8000548:	f106 38ff 	add.w	r8, r6, #4294967295
 800054c:	d216      	bcs.n	800057c <__udivmoddi4+0x2b0>
 800054e:	428b      	cmp	r3, r1
 8000550:	d914      	bls.n	800057c <__udivmoddi4+0x2b0>
 8000552:	3e02      	subs	r6, #2
 8000554:	4461      	add	r1, ip
 8000556:	1ac9      	subs	r1, r1, r3
 8000558:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800055c:	e738      	b.n	80003d0 <__udivmoddi4+0x104>
 800055e:	462e      	mov	r6, r5
 8000560:	4628      	mov	r0, r5
 8000562:	e705      	b.n	8000370 <__udivmoddi4+0xa4>
 8000564:	4606      	mov	r6, r0
 8000566:	e6e3      	b.n	8000330 <__udivmoddi4+0x64>
 8000568:	4618      	mov	r0, r3
 800056a:	e6f8      	b.n	800035e <__udivmoddi4+0x92>
 800056c:	454b      	cmp	r3, r9
 800056e:	d2a9      	bcs.n	80004c4 <__udivmoddi4+0x1f8>
 8000570:	ebb9 0802 	subs.w	r8, r9, r2
 8000574:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000578:	3801      	subs	r0, #1
 800057a:	e7a3      	b.n	80004c4 <__udivmoddi4+0x1f8>
 800057c:	4646      	mov	r6, r8
 800057e:	e7ea      	b.n	8000556 <__udivmoddi4+0x28a>
 8000580:	4620      	mov	r0, r4
 8000582:	e794      	b.n	80004ae <__udivmoddi4+0x1e2>
 8000584:	4640      	mov	r0, r8
 8000586:	e7d1      	b.n	800052c <__udivmoddi4+0x260>
 8000588:	46d0      	mov	r8, sl
 800058a:	e77b      	b.n	8000484 <__udivmoddi4+0x1b8>
 800058c:	3b02      	subs	r3, #2
 800058e:	4461      	add	r1, ip
 8000590:	e732      	b.n	80003f8 <__udivmoddi4+0x12c>
 8000592:	4630      	mov	r0, r6
 8000594:	e709      	b.n	80003aa <__udivmoddi4+0xde>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e742      	b.n	8000422 <__udivmoddi4+0x156>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <write_number>:
#include "calc.h"
#include "inttypes.h"
#include "oled.h"
#include "kb.h"

void write_number(int64_t number) {
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	e9c7 0100 	strd	r0, r1, [r7]
	char charsFromNum[18] = { 0 };
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	819a      	strh	r2, [r3, #12]
	uint16_t index = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	83fb      	strh	r3, [r7, #30]
	uint16_t isNegative = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	83bb      	strh	r3, [r7, #28]
	if (number < 0) {
 80005c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	da29      	bge.n	8000620 <write_number+0x80>
		isNegative = 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	83bb      	strh	r3, [r7, #28]
		number = number * -1;
 80005d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005d4:	2100      	movs	r1, #0
 80005d6:	4254      	negs	r4, r2
 80005d8:	eb61 0503 	sbc.w	r5, r1, r3
 80005dc:	e9c7 4500 	strd	r4, r5, [r7]
	}
	while (number > 0) {
 80005e0:	e01e      	b.n	8000620 <write_number+0x80>
		charsFromNum[index] = number % 10 + '0';
 80005e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80005e6:	f04f 020a 	mov.w	r2, #10
 80005ea:	f04f 0300 	mov.w	r3, #0
 80005ee:	f7ff fe05 	bl	80001fc <__aeabi_ldivmod>
 80005f2:	b2d2      	uxtb	r2, r2
 80005f4:	8bfb      	ldrh	r3, [r7, #30]
 80005f6:	3230      	adds	r2, #48	; 0x30
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	3320      	adds	r3, #32
 80005fc:	443b      	add	r3, r7
 80005fe:	f803 2c18 	strb.w	r2, [r3, #-24]
		number = number / 10;
 8000602:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000606:	f04f 020a 	mov.w	r2, #10
 800060a:	f04f 0300 	mov.w	r3, #0
 800060e:	f7ff fdf5 	bl	80001fc <__aeabi_ldivmod>
 8000612:	4602      	mov	r2, r0
 8000614:	460b      	mov	r3, r1
 8000616:	e9c7 2300 	strd	r2, r3, [r7]
		index++;
 800061a:	8bfb      	ldrh	r3, [r7, #30]
 800061c:	3301      	adds	r3, #1
 800061e:	83fb      	strh	r3, [r7, #30]
	while (number > 0) {
 8000620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000624:	2a01      	cmp	r2, #1
 8000626:	f173 0300 	sbcs.w	r3, r3, #0
 800062a:	dada      	bge.n	80005e2 <write_number+0x42>
	}
	if (index == 0) {
 800062c:	8bfb      	ldrh	r3, [r7, #30]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d103      	bne.n	800063a <write_number+0x9a>
		index = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	83fb      	strh	r3, [r7, #30]
		charsFromNum[0] = '0';
 8000636:	2330      	movs	r3, #48	; 0x30
 8000638:	723b      	strb	r3, [r7, #8]
	}
	if (isNegative == 1) {
 800063a:	8bbb      	ldrh	r3, [r7, #28]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d116      	bne.n	800066e <write_number+0xce>
		charsFromNum[index] = '-';
 8000640:	8bfb      	ldrh	r3, [r7, #30]
 8000642:	3320      	adds	r3, #32
 8000644:	443b      	add	r3, r7
 8000646:	222d      	movs	r2, #45	; 0x2d
 8000648:	f803 2c18 	strb.w	r2, [r3, #-24]
		index++;
 800064c:	8bfb      	ldrh	r3, [r7, #30]
 800064e:	3301      	adds	r3, #1
 8000650:	83fb      	strh	r3, [r7, #30]
	}
	while (index > 0) {
 8000652:	e00c      	b.n	800066e <write_number+0xce>
		index--;
 8000654:	8bfb      	ldrh	r3, [r7, #30]
 8000656:	3b01      	subs	r3, #1
 8000658:	83fb      	strh	r3, [r7, #30]
		oled_WriteChar(charsFromNum[index], Font_7x10, White);
 800065a:	8bfb      	ldrh	r3, [r7, #30]
 800065c:	3320      	adds	r3, #32
 800065e:	443b      	add	r3, r7
 8000660:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <write_number+0xe0>)
 8000666:	2301      	movs	r3, #1
 8000668:	ca06      	ldmia	r2, {r1, r2}
 800066a:	f000 fe19 	bl	80012a0 <oled_WriteChar>
	while (index > 0) {
 800066e:	8bfb      	ldrh	r3, [r7, #30]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1ef      	bne.n	8000654 <write_number+0xb4>
	}
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3720      	adds	r7, #32
 800067a:	46bd      	mov	sp, r7
 800067c:	bdb0      	pop	{r4, r5, r7, pc}
 800067e:	bf00      	nop
 8000680:	20000000 	.word	0x20000000

08000684 <run>:

void run(void) {
 8000684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000688:	b0a8      	sub	sp, #160	; 0xa0
 800068a:	af00      	add	r7, sp, #0
	oled_Reset();
 800068c:	f000 fcda 	bl	8001044 <oled_Reset>
	oled_WriteString("Hello!", Font_11x18, White);
 8000690:	4aba      	ldr	r2, [pc, #744]	; (800097c <run+0x2f8>)
 8000692:	2301      	movs	r3, #1
 8000694:	ca06      	ldmia	r2, {r1, r2}
 8000696:	48ba      	ldr	r0, [pc, #744]	; (8000980 <run+0x2fc>)
 8000698:	f000 fe82 	bl	80013a0 <oled_WriteString>
	oled_UpdateScreen();
 800069c:	f000 fd70 	bl	8001180 <oled_UpdateScreen>

	int64_t a = 0, b = 0, lenA = 0, lenB = 0;
 80006a0:	f04f 0200 	mov.w	r2, #0
 80006a4:	f04f 0300 	mov.w	r3, #0
 80006a8:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 80006ac:	f04f 0200 	mov.w	r2, #0
 80006b0:	f04f 0300 	mov.w	r3, #0
 80006b4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	f04f 0300 	mov.w	r3, #0
 80006c0:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 80006c4:	f04f 0200 	mov.w	r2, #0
 80006c8:	f04f 0300 	mov.w	r3, #0
 80006cc:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	uint8_t rows[4] = { 0xF7, 0x7B, 0x3D, 0x1E }, checkedRow;
 80006d0:	4bac      	ldr	r3, [pc, #688]	; (8000984 <run+0x300>)
 80006d2:	673b      	str	r3, [r7, #112]	; 0x70
	enum Key newKey = NOT_PRESSED;
 80006d4:	230c      	movs	r3, #12
 80006d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	enum Mode mode = FIRST_OPERAND;
 80006da:	2300      	movs	r3, #0
 80006dc:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	enum Operation operation = PLUS;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

	while (1) {
		for (int col = 0; col < 4; col++) {
 80006e6:	2300      	movs	r3, #0
 80006e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80006ea:	e083      	b.n	80007f4 <run+0x170>
			checkedRow = Check_Row(rows[col]);
 80006ec:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80006f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fb3e 	bl	8000d78 <Check_Row>
 80006fc:	4603      	mov	r3, r0
 80006fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			switch (col) {
 8000702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000704:	2b03      	cmp	r3, #3
 8000706:	d872      	bhi.n	80007ee <run+0x16a>
 8000708:	a201      	add	r2, pc, #4	; (adr r2, 8000710 <run+0x8c>)
 800070a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070e:	bf00      	nop
 8000710:	08000721 	.word	0x08000721
 8000714:	08000751 	.word	0x08000751
 8000718:	08000781 	.word	0x08000781
 800071c:	080007b1 	.word	0x080007b1
			case 0:
				switch (checkedRow) {
 8000720:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000724:	2b04      	cmp	r3, #4
 8000726:	d00e      	beq.n	8000746 <run+0xc2>
 8000728:	2b04      	cmp	r3, #4
 800072a:	dc59      	bgt.n	80007e0 <run+0x15c>
 800072c:	2b01      	cmp	r3, #1
 800072e:	d002      	beq.n	8000736 <run+0xb2>
 8000730:	2b02      	cmp	r3, #2
 8000732:	d004      	beq.n	800073e <run+0xba>

				case 0x04:
					newKey = ZERO;
					break;
				}
				break;
 8000734:	e054      	b.n	80007e0 <run+0x15c>
					newKey = FUN;
 8000736:	230b      	movs	r3, #11
 8000738:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					break;
 800073c:	e007      	b.n	800074e <run+0xca>
					newKey = EQ;
 800073e:	230a      	movs	r3, #10
 8000740:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					break;
 8000744:	e003      	b.n	800074e <run+0xca>
					newKey = ZERO;
 8000746:	2300      	movs	r3, #0
 8000748:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					break;
 800074c:	bf00      	nop
				break;
 800074e:	e047      	b.n	80007e0 <run+0x15c>

			case 1:
				switch (checkedRow) {
 8000750:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000754:	2b04      	cmp	r3, #4
 8000756:	d00e      	beq.n	8000776 <run+0xf2>
 8000758:	2b04      	cmp	r3, #4
 800075a:	dc43      	bgt.n	80007e4 <run+0x160>
 800075c:	2b01      	cmp	r3, #1
 800075e:	d002      	beq.n	8000766 <run+0xe2>
 8000760:	2b02      	cmp	r3, #2
 8000762:	d004      	beq.n	800076e <run+0xea>

				case 0x04:
					newKey = ONE;
					break;
				}
				break;
 8000764:	e03e      	b.n	80007e4 <run+0x160>
					newKey = THREE;
 8000766:	2303      	movs	r3, #3
 8000768:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					break;
 800076c:	e007      	b.n	800077e <run+0xfa>
					newKey = TWO;
 800076e:	2302      	movs	r3, #2
 8000770:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					break;
 8000774:	e003      	b.n	800077e <run+0xfa>
					newKey = ONE;
 8000776:	2301      	movs	r3, #1
 8000778:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					break;
 800077c:	bf00      	nop
				break;
 800077e:	e031      	b.n	80007e4 <run+0x160>

			case 2:
				switch (checkedRow) {
 8000780:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000784:	2b04      	cmp	r3, #4
 8000786:	d00e      	beq.n	80007a6 <run+0x122>
 8000788:	2b04      	cmp	r3, #4
 800078a:	dc2d      	bgt.n	80007e8 <run+0x164>
 800078c:	2b01      	cmp	r3, #1
 800078e:	d002      	beq.n	8000796 <run+0x112>
 8000790:	2b02      	cmp	r3, #2
 8000792:	d004      	beq.n	800079e <run+0x11a>

				case 0x04:
					newKey = FOUR;
					break;
				}
				break;
 8000794:	e028      	b.n	80007e8 <run+0x164>
					newKey = SIX;
 8000796:	2306      	movs	r3, #6
 8000798:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					break;
 800079c:	e007      	b.n	80007ae <run+0x12a>
					newKey = FIVE;
 800079e:	2305      	movs	r3, #5
 80007a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					break;
 80007a4:	e003      	b.n	80007ae <run+0x12a>
					newKey = FOUR;
 80007a6:	2304      	movs	r3, #4
 80007a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					break;
 80007ac:	bf00      	nop
				break;
 80007ae:	e01b      	b.n	80007e8 <run+0x164>

			case 3:
				switch (checkedRow) {
 80007b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	d00e      	beq.n	80007d6 <run+0x152>
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	dc17      	bgt.n	80007ec <run+0x168>
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d002      	beq.n	80007c6 <run+0x142>
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d004      	beq.n	80007ce <run+0x14a>

				case 0x04:
					newKey = SEVEN;
					break;
				}
				break;
 80007c4:	e012      	b.n	80007ec <run+0x168>
					newKey = NINE;
 80007c6:	2309      	movs	r3, #9
 80007c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					break;
 80007cc:	e007      	b.n	80007de <run+0x15a>
					newKey = EIGHT;
 80007ce:	2308      	movs	r3, #8
 80007d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					break;
 80007d4:	e003      	b.n	80007de <run+0x15a>
					newKey = SEVEN;
 80007d6:	2307      	movs	r3, #7
 80007d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					break;
 80007dc:	bf00      	nop
				break;
 80007de:	e005      	b.n	80007ec <run+0x168>
				break;
 80007e0:	bf00      	nop
 80007e2:	e004      	b.n	80007ee <run+0x16a>
				break;
 80007e4:	bf00      	nop
 80007e6:	e002      	b.n	80007ee <run+0x16a>
				break;
 80007e8:	bf00      	nop
 80007ea:	e000      	b.n	80007ee <run+0x16a>
				break;
 80007ec:	bf00      	nop
		for (int col = 0; col < 4; col++) {
 80007ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007f0:	3301      	adds	r3, #1
 80007f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80007f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	f77f af78 	ble.w	80006ec <run+0x68>

			}
		}

		if (newKey != NOT_PRESSED) {
 80007fc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000800:	2b0c      	cmp	r3, #12
 8000802:	f000 81dc 	beq.w	8000bbe <run+0x53a>
			switch (mode) {
 8000806:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800080a:	2b02      	cmp	r3, #2
 800080c:	f000 8129 	beq.w	8000a62 <run+0x3de>
 8000810:	2b02      	cmp	r3, #2
 8000812:	f300 81d2 	bgt.w	8000bba <run+0x536>
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <run+0x19c>
 800081a:	2b01      	cmp	r3, #1
 800081c:	d071      	beq.n	8000902 <run+0x27e>
 800081e:	e1cc      	b.n	8000bba <run+0x536>
			case FIRST_OPERAND:
				if (lenA == 0) {
 8000820:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8000824:	4313      	orrs	r3, r2
 8000826:	d101      	bne.n	800082c <run+0x1a8>
					oled_Reset();
 8000828:	f000 fc0c 	bl	8001044 <oled_Reset>
				}
				switch (newKey) {
 800082c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000830:	2b0a      	cmp	r3, #10
 8000832:	d064      	beq.n	80008fe <run+0x27a>
 8000834:	2b0b      	cmp	r3, #11
 8000836:	d11e      	bne.n	8000876 <run+0x1f2>
				case EQ:
					break;
				case FUN:
					if (lenA == 0) {
 8000838:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800083c:	4313      	orrs	r3, r2
 800083e:	d109      	bne.n	8000854 <run+0x1d0>
						oled_SetCursor(0, 0);
 8000840:	2100      	movs	r1, #0
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fdd2 	bl	80013ec <oled_SetCursor>
						oled_WriteChar('0', Font_7x10, White);
 8000848:	4a4f      	ldr	r2, [pc, #316]	; (8000988 <run+0x304>)
 800084a:	2301      	movs	r3, #1
 800084c:	ca06      	ldmia	r2, {r1, r2}
 800084e:	2030      	movs	r0, #48	; 0x30
 8000850:	f000 fd26 	bl	80012a0 <oled_WriteChar>
					}
					operation = PLUS;
 8000854:	2300      	movs	r3, #0
 8000856:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
					mode = FUNCTION;
 800085a:	2301      	movs	r3, #1
 800085c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					oled_SetCursor(0, 10);
 8000860:	210a      	movs	r1, #10
 8000862:	2000      	movs	r0, #0
 8000864:	f000 fdc2 	bl	80013ec <oled_SetCursor>
					oled_WriteChar('+', Font_7x10, White);
 8000868:	4a47      	ldr	r2, [pc, #284]	; (8000988 <run+0x304>)
 800086a:	2301      	movs	r3, #1
 800086c:	ca06      	ldmia	r2, {r1, r2}
 800086e:	202b      	movs	r0, #43	; 0x2b
 8000870:	f000 fd16 	bl	80012a0 <oled_WriteChar>
					break;
 8000874:	e044      	b.n	8000900 <run+0x27c>
				default:
					lenA++;
 8000876:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800087a:	1c51      	adds	r1, r2, #1
 800087c:	64b9      	str	r1, [r7, #72]	; 0x48
 800087e:	f143 0300 	adc.w	r3, r3, #0
 8000882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000884:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8000888:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
					a *= 10;
 800088c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8000890:	4622      	mov	r2, r4
 8000892:	462b      	mov	r3, r5
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	f04f 0100 	mov.w	r1, #0
 800089c:	0099      	lsls	r1, r3, #2
 800089e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80008a2:	0090      	lsls	r0, r2, #2
 80008a4:	4602      	mov	r2, r0
 80008a6:	460b      	mov	r3, r1
 80008a8:	eb12 0804 	adds.w	r8, r2, r4
 80008ac:	eb43 0905 	adc.w	r9, r3, r5
 80008b0:	eb18 0308 	adds.w	r3, r8, r8
 80008b4:	643b      	str	r3, [r7, #64]	; 0x40
 80008b6:	eb49 0309 	adc.w	r3, r9, r9
 80008ba:	647b      	str	r3, [r7, #68]	; 0x44
 80008bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80008c0:	e9c7 8926 	strd	r8, r9, [r7, #152]	; 0x98
					a += newKey;
 80008c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008c8:	2200      	movs	r2, #0
 80008ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80008cc:	65fa      	str	r2, [r7, #92]	; 0x5c
 80008ce:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80008d2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80008d6:	4621      	mov	r1, r4
 80008d8:	1851      	adds	r1, r2, r1
 80008da:	63b9      	str	r1, [r7, #56]	; 0x38
 80008dc:	4629      	mov	r1, r5
 80008de:	414b      	adcs	r3, r1
 80008e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008e2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80008e6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
					oled_WriteChar(newKey + '0', Font_7x10, White);
 80008ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008ee:	3330      	adds	r3, #48	; 0x30
 80008f0:	b2d8      	uxtb	r0, r3
 80008f2:	4a25      	ldr	r2, [pc, #148]	; (8000988 <run+0x304>)
 80008f4:	2301      	movs	r3, #1
 80008f6:	ca06      	ldmia	r2, {r1, r2}
 80008f8:	f000 fcd2 	bl	80012a0 <oled_WriteChar>

					break;
 80008fc:	e000      	b.n	8000900 <run+0x27c>
					break;
 80008fe:	bf00      	nop
				}
				break;
 8000900:	e15b      	b.n	8000bba <run+0x536>
			case FUNCTION:
				switch (newKey) {
 8000902:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000906:	2b0a      	cmp	r3, #10
 8000908:	d002      	beq.n	8000910 <run+0x28c>
 800090a:	2b0b      	cmp	r3, #11
 800090c:	d053      	beq.n	80009b6 <run+0x332>
 800090e:	e086      	b.n	8000a1e <run+0x39a>
				case EQ:
					switch (operation) {
 8000910:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000914:	2b02      	cmp	r3, #2
 8000916:	d012      	beq.n	800093e <run+0x2ba>
 8000918:	2b02      	cmp	r3, #2
 800091a:	dc38      	bgt.n	800098e <run+0x30a>
 800091c:	2b00      	cmp	r3, #0
 800091e:	d035      	beq.n	800098c <run+0x308>
 8000920:	2b01      	cmp	r3, #1
 8000922:	d134      	bne.n	800098e <run+0x30a>
					case PLUS:
						break;
					case MINUS:
						a *= -1;
 8000924:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8000928:	2100      	movs	r1, #0
 800092a:	4250      	negs	r0, r2
 800092c:	6338      	str	r0, [r7, #48]	; 0x30
 800092e:	eb61 0303 	sbc.w	r3, r1, r3
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
 8000934:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000938:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
						break;
 800093c:	e027      	b.n	800098e <run+0x30a>
					case MUL:
						a = a * a;
 800093e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000942:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000946:	fb03 f102 	mul.w	r1, r3, r2
 800094a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800094e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000952:	fb02 f303 	mul.w	r3, r2, r3
 8000956:	18ca      	adds	r2, r1, r3
 8000958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800095c:	fba3 1303 	umull	r1, r3, r3, r3
 8000960:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000962:	460b      	mov	r3, r1
 8000964:	66bb      	str	r3, [r7, #104]	; 0x68
 8000966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000968:	18d3      	adds	r3, r2, r3
 800096a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800096c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8000970:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 8000974:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
						break;
 8000978:	e009      	b.n	800098e <run+0x30a>
 800097a:	bf00      	nop
 800097c:	20000008 	.word	0x20000008
 8000980:	08003d68 	.word	0x08003d68
 8000984:	1e3d7bf7 	.word	0x1e3d7bf7
 8000988:	20000000 	.word	0x20000000
						break;
 800098c:	bf00      	nop
					}
					oled_Reset();
 800098e:	f000 fb59 	bl	8001044 <oled_Reset>
					write_number(a);
 8000992:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8000996:	f7ff fe03 	bl	80005a0 <write_number>
					operation = PLUS;
 800099a:	2300      	movs	r3, #0
 800099c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
					oled_SetCursor(0, 10);
 80009a0:	210a      	movs	r1, #10
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 fd22 	bl	80013ec <oled_SetCursor>
					oled_WriteChar('+', Font_7x10, White);
 80009a8:	4a89      	ldr	r2, [pc, #548]	; (8000bd0 <run+0x54c>)
 80009aa:	2301      	movs	r3, #1
 80009ac:	ca06      	ldmia	r2, {r1, r2}
 80009ae:	202b      	movs	r0, #43	; 0x2b
 80009b0:	f000 fc76 	bl	80012a0 <oled_WriteChar>
					break;
 80009b4:	e054      	b.n	8000a60 <run+0x3dc>
				case FUN:
					operation = (operation + 1) % 3;
 80009b6:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80009ba:	1c59      	adds	r1, r3, #1
 80009bc:	4b85      	ldr	r3, [pc, #532]	; (8000bd4 <run+0x550>)
 80009be:	fb83 3201 	smull	r3, r2, r3, r1
 80009c2:	17cb      	asrs	r3, r1, #31
 80009c4:	1ad2      	subs	r2, r2, r3
 80009c6:	4613      	mov	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4413      	add	r3, r2
 80009cc:	1aca      	subs	r2, r1, r3
 80009ce:	4613      	mov	r3, r2
 80009d0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
					oled_SetCursor(0, 10);
 80009d4:	210a      	movs	r1, #10
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 fd08 	bl	80013ec <oled_SetCursor>
					switch (operation) {
 80009dc:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d014      	beq.n	8000a0e <run+0x38a>
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	dc3a      	bgt.n	8000a5e <run+0x3da>
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d002      	beq.n	80009f2 <run+0x36e>
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d007      	beq.n	8000a00 <run+0x37c>
						break;
					case MUL:
						oled_WriteChar('*', Font_7x10, White);
						break;
					}
					break;
 80009f0:	e035      	b.n	8000a5e <run+0x3da>
						oled_WriteChar('+', Font_7x10, White);
 80009f2:	4a77      	ldr	r2, [pc, #476]	; (8000bd0 <run+0x54c>)
 80009f4:	2301      	movs	r3, #1
 80009f6:	ca06      	ldmia	r2, {r1, r2}
 80009f8:	202b      	movs	r0, #43	; 0x2b
 80009fa:	f000 fc51 	bl	80012a0 <oled_WriteChar>
						break;
 80009fe:	e00d      	b.n	8000a1c <run+0x398>
						oled_WriteChar('-', Font_7x10, White);
 8000a00:	4a73      	ldr	r2, [pc, #460]	; (8000bd0 <run+0x54c>)
 8000a02:	2301      	movs	r3, #1
 8000a04:	ca06      	ldmia	r2, {r1, r2}
 8000a06:	202d      	movs	r0, #45	; 0x2d
 8000a08:	f000 fc4a 	bl	80012a0 <oled_WriteChar>
						break;
 8000a0c:	e006      	b.n	8000a1c <run+0x398>
						oled_WriteChar('*', Font_7x10, White);
 8000a0e:	4a70      	ldr	r2, [pc, #448]	; (8000bd0 <run+0x54c>)
 8000a10:	2301      	movs	r3, #1
 8000a12:	ca06      	ldmia	r2, {r1, r2}
 8000a14:	202a      	movs	r0, #42	; 0x2a
 8000a16:	f000 fc43 	bl	80012a0 <oled_WriteChar>
						break;
 8000a1a:	bf00      	nop
					break;
 8000a1c:	e01f      	b.n	8000a5e <run+0x3da>
				default:
					lenB = 1;
 8000a1e:	f04f 0201 	mov.w	r2, #1
 8000a22:	f04f 0300 	mov.w	r3, #0
 8000a26:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
					b = newKey;
 8000a2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000a2e:	2200      	movs	r2, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000a34:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000a38:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
					mode = SECOND_OPERAND;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					oled_SetCursor(0, 20);
 8000a42:	2114      	movs	r1, #20
 8000a44:	2000      	movs	r0, #0
 8000a46:	f000 fcd1 	bl	80013ec <oled_SetCursor>
					oled_WriteChar('0' + newKey, Font_7x10, White);
 8000a4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000a4e:	3330      	adds	r3, #48	; 0x30
 8000a50:	b2d8      	uxtb	r0, r3
 8000a52:	4a5f      	ldr	r2, [pc, #380]	; (8000bd0 <run+0x54c>)
 8000a54:	2301      	movs	r3, #1
 8000a56:	ca06      	ldmia	r2, {r1, r2}
 8000a58:	f000 fc22 	bl	80012a0 <oled_WriteChar>
					break;
 8000a5c:	e000      	b.n	8000a60 <run+0x3dc>
					break;
 8000a5e:	bf00      	nop
				}
				break;
 8000a60:	e0ab      	b.n	8000bba <run+0x536>
			case SECOND_OPERAND:
				switch (newKey) {
 8000a62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000a66:	2b0a      	cmp	r3, #10
 8000a68:	d002      	beq.n	8000a70 <run+0x3ec>
 8000a6a:	2b0b      	cmp	r3, #11
 8000a6c:	d002      	beq.n	8000a74 <run+0x3f0>
 8000a6e:	e05f      	b.n	8000b30 <run+0x4ac>
				case EQ:
					oled_Reset();
 8000a70:	f000 fae8 	bl	8001044 <oled_Reset>
				case FUN:
					switch (operation) {
 8000a74:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d022      	beq.n	8000ac2 <run+0x43e>
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	dc40      	bgt.n	8000b02 <run+0x47e>
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <run+0x406>
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d00e      	beq.n	8000aa6 <run+0x422>
 8000a88:	e03b      	b.n	8000b02 <run+0x47e>
					case PLUS:
						a += b;
 8000a8a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8000a8e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8000a92:	1884      	adds	r4, r0, r2
 8000a94:	623c      	str	r4, [r7, #32]
 8000a96:	eb41 0303 	adc.w	r3, r1, r3
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a9c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000aa0:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
						break;
 8000aa4:	e02d      	b.n	8000b02 <run+0x47e>
					case MINUS:
						a -= b;
 8000aa6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8000aaa:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8000aae:	1a84      	subs	r4, r0, r2
 8000ab0:	61bc      	str	r4, [r7, #24]
 8000ab2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ab6:	61fb      	str	r3, [r7, #28]
 8000ab8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000abc:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
						break;
 8000ac0:	e01f      	b.n	8000b02 <run+0x47e>
					case MUL:
						a *= b;
 8000ac2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000ac6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000aca:	fb03 f102 	mul.w	r1, r3, r2
 8000ace:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000ad2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ad6:	fb02 f303 	mul.w	r3, r2, r3
 8000ada:	4419      	add	r1, r3
 8000adc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000ae0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae8:	667b      	str	r3, [r7, #100]	; 0x64
 8000aea:	4613      	mov	r3, r2
 8000aec:	663b      	str	r3, [r7, #96]	; 0x60
 8000aee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000af0:	18cb      	adds	r3, r1, r3
 8000af2:	667b      	str	r3, [r7, #100]	; 0x64
 8000af4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8000af8:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 8000afc:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
						break;
 8000b00:	bf00      	nop
					}

					oled_Reset();
 8000b02:	f000 fa9f 	bl	8001044 <oled_Reset>
					write_number(a);
 8000b06:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8000b0a:	f7ff fd49 	bl	80005a0 <write_number>
					operation = PLUS;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
					mode = FUNCTION;
 8000b14:	2301      	movs	r3, #1
 8000b16:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					oled_SetCursor(0, 10);
 8000b1a:	210a      	movs	r1, #10
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f000 fc65 	bl	80013ec <oled_SetCursor>
					oled_WriteChar('+', Font_7x10, White);
 8000b22:	4a2b      	ldr	r2, [pc, #172]	; (8000bd0 <run+0x54c>)
 8000b24:	2301      	movs	r3, #1
 8000b26:	ca06      	ldmia	r2, {r1, r2}
 8000b28:	202b      	movs	r0, #43	; 0x2b
 8000b2a:	f000 fbb9 	bl	80012a0 <oled_WriteChar>
					break;
 8000b2e:	e043      	b.n	8000bb8 <run+0x534>
				default:
					lenB++;
 8000b30:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8000b34:	1c51      	adds	r1, r2, #1
 8000b36:	6139      	str	r1, [r7, #16]
 8000b38:	f143 0300 	adc.w	r3, r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000b42:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
					b *= 10;
 8000b46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000b4a:	4622      	mov	r2, r4
 8000b4c:	462b      	mov	r3, r5
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	f04f 0100 	mov.w	r1, #0
 8000b56:	0099      	lsls	r1, r3, #2
 8000b58:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000b5c:	0090      	lsls	r0, r2, #2
 8000b5e:	4602      	mov	r2, r0
 8000b60:	460b      	mov	r3, r1
 8000b62:	eb12 0a04 	adds.w	sl, r2, r4
 8000b66:	eb43 0b05 	adc.w	fp, r3, r5
 8000b6a:	eb1a 030a 	adds.w	r3, sl, sl
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	eb4b 030b 	adc.w	r3, fp, fp
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8000b7a:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
					b += newKey;
 8000b7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000b82:	2200      	movs	r2, #0
 8000b84:	653b      	str	r3, [r7, #80]	; 0x50
 8000b86:	657a      	str	r2, [r7, #84]	; 0x54
 8000b88:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8000b8c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8000b90:	4621      	mov	r1, r4
 8000b92:	1851      	adds	r1, r2, r1
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	4629      	mov	r1, r5
 8000b98:	414b      	adcs	r3, r1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ba0:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
					oled_WriteChar(newKey + '0', Font_7x10, White);
 8000ba4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000ba8:	3330      	adds	r3, #48	; 0x30
 8000baa:	b2d8      	uxtb	r0, r3
 8000bac:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <run+0x54c>)
 8000bae:	2301      	movs	r3, #1
 8000bb0:	ca06      	ldmia	r2, {r1, r2}
 8000bb2:	f000 fb75 	bl	80012a0 <oled_WriteChar>
					break;
 8000bb6:	bf00      	nop

				}
				break;
 8000bb8:	bf00      	nop

			}
			oled_UpdateScreen();
 8000bba:	f000 fae1 	bl	8001180 <oled_UpdateScreen>
		}

		newKey = NOT_PRESSED;
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		HAL_Delay(500); // защита от дребезга
 8000bc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bc8:	f000 fe06 	bl	80017d8 <HAL_Delay>
		for (int col = 0; col < 4; col++) {
 8000bcc:	e58b      	b.n	80006e6 <run+0x62>
 8000bce:	bf00      	nop
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	55555556 	.word	0x55555556

08000bd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_GPIO_Init+0x4c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <MX_GPIO_Init+0x4c>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MX_GPIO_Init+0x4c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_GPIO_Init+0x4c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <MX_GPIO_Init+0x4c>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_GPIO_Init+0x4c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c2e:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <MX_I2C1_Init+0x54>)
 8000c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c34:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_I2C1_Init+0x58>)
 8000c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c66:	f001 f86d 	bl	8001d44 <HAL_I2C_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c70:	f000 f9c8 	bl	8001004 <Error_Handler>
  }

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000038 	.word	0x20000038
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	00061a80 	.word	0x00061a80

08000c84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_I2C_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12c      	bne.n	8000d00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc8:	2312      	movs	r3, #18
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480c      	ldr	r0, [pc, #48]	; (8000d10 <HAL_I2C_MspInit+0x8c>)
 8000ce0:	f000 fe84 	bl	80019ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020400 	.word	0x40020400

08000d14 <Set_Keyboard>:
#include "sdk_uart.h"
#include "usart.h"

#define KBRD_ADDR 0xE2

HAL_StatusTypeDef Set_Keyboard( void ) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf;

	buf = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_ADDR, POLARITY_INVERSION, &buf);
 8000d22:	1dbb      	adds	r3, r7, #6
 8000d24:	461a      	mov	r2, r3
 8000d26:	2102      	movs	r1, #2
 8000d28:	20e2      	movs	r0, #226	; 0xe2
 8000d2a:	f000 fb97 	bl	800145c <PCA9538_Write_Register>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <Set_Keyboard+0x2c>
		UART_Transmit((uint8_t*)"Error write polarity\n");
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <Set_Keyboard+0x5c>)
 8000d3a:	f000 fbc1 	bl	80014c0 <UART_Transmit>
		goto exit;
 8000d3e:	e011      	b.n	8000d64 <Set_Keyboard+0x50>
	}

	buf = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_ADDR, OUTPUT_PORT, &buf);
 8000d44:	1dbb      	adds	r3, r7, #6
 8000d46:	461a      	mov	r2, r3
 8000d48:	2101      	movs	r1, #1
 8000d4a:	20e2      	movs	r0, #226	; 0xe2
 8000d4c:	f000 fb86 	bl	800145c <PCA9538_Write_Register>
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <Set_Keyboard+0x4e>
		UART_Transmit((uint8_t*)"Error write output\n");
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <Set_Keyboard+0x60>)
 8000d5c:	f000 fbb0 	bl	80014c0 <UART_Transmit>
 8000d60:	e000      	b.n	8000d64 <Set_Keyboard+0x50>
	}

exit:
 8000d62:	bf00      	nop
	return ret;
 8000d64:	79fb      	ldrb	r3, [r7, #7]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	08003d70 	.word	0x08003d70
 8000d74:	08003d88 	.word	0x08003d88

08000d78 <Check_Row>:

uint8_t Check_Row( uint8_t  Nrow ) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	uint8_t Nkey = 0x00;
 8000d82:	2300      	movs	r3, #0
 8000d84:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret = HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73bb      	strb	r3, [r7, #14]
	uint8_t buf;
	uint8_t kbd_in;

	ret = Set_Keyboard();
 8000d8a:	f7ff ffc3 	bl	8000d14 <Set_Keyboard>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <Check_Row+0x26>
		UART_Transmit((uint8_t*)"Error write init\n");
 8000d98:	4858      	ldr	r0, [pc, #352]	; (8000efc <Check_Row+0x184>)
 8000d9a:	f000 fb91 	bl	80014c0 <UART_Transmit>
	}

	buf = Nrow;
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	733b      	strb	r3, [r7, #12]
	ret = PCA9538_Write_Register(KBRD_ADDR, CONFIG, &buf);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	461a      	mov	r2, r3
 8000da8:	2103      	movs	r1, #3
 8000daa:	20e2      	movs	r0, #226	; 0xe2
 8000dac:	f000 fb56 	bl	800145c <PCA9538_Write_Register>
 8000db0:	4603      	mov	r3, r0
 8000db2:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d002      	beq.n	8000dc0 <Check_Row+0x48>
		UART_Transmit((uint8_t*)"Error write config\n");
 8000dba:	4851      	ldr	r0, [pc, #324]	; (8000f00 <Check_Row+0x188>)
 8000dbc:	f000 fb80 	bl	80014c0 <UART_Transmit>
	}

	ret = PCA9538_Read_Inputs(KBRD_ADDR, &buf);
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	20e2      	movs	r0, #226	; 0xe2
 8000dc8:	f000 fb68 	bl	800149c <PCA9538_Read_Inputs>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 8000dd0:	7bbb      	ldrb	r3, [r7, #14]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d002      	beq.n	8000ddc <Check_Row+0x64>
		UART_Transmit((uint8_t*)"Read error\n");
 8000dd6:	484b      	ldr	r0, [pc, #300]	; (8000f04 <Check_Row+0x18c>)
 8000dd8:	f000 fb72 	bl	80014c0 <UART_Transmit>
	}

	kbd_in = buf & 0x70;
 8000ddc:	7b3b      	ldrb	r3, [r7, #12]
 8000dde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000de2:	737b      	strb	r3, [r7, #13]
	Nkey = kbd_in;
 8000de4:	7b7b      	ldrb	r3, [r7, #13]
 8000de6:	73fb      	strb	r3, [r7, #15]
	if( kbd_in != 0x70) {
 8000de8:	7b7b      	ldrb	r3, [r7, #13]
 8000dea:	2b70      	cmp	r3, #112	; 0x70
 8000dec:	d07c      	beq.n	8000ee8 <Check_Row+0x170>
		if( !(kbd_in & 0x10) ) {
 8000dee:	7b7b      	ldrb	r3, [r7, #13]
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d123      	bne.n	8000e40 <Check_Row+0xc8>
			switch (Nrow) {
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	3bf7      	subs	r3, #247	; 0xf7
 8000dfc:	2b07      	cmp	r3, #7
 8000dfe:	d820      	bhi.n	8000e42 <Check_Row+0xca>
 8000e00:	a201      	add	r2, pc, #4	; (adr r2, 8000e08 <Check_Row+0x90>)
 8000e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e06:	bf00      	nop
 8000e08:	08000e3b 	.word	0x08000e3b
 8000e0c:	08000e43 	.word	0x08000e43
 8000e10:	08000e43 	.word	0x08000e43
 8000e14:	08000e43 	.word	0x08000e43
 8000e18:	08000e35 	.word	0x08000e35
 8000e1c:	08000e43 	.word	0x08000e43
 8000e20:	08000e2f 	.word	0x08000e2f
 8000e24:	08000e29 	.word	0x08000e29
				case ROW1:
					Nkey = 0x04;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	73fb      	strb	r3, [r7, #15]
					break;
 8000e2c:	e009      	b.n	8000e42 <Check_Row+0xca>
				case ROW2:
					Nkey = 0x04;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	73fb      	strb	r3, [r7, #15]
					break;
 8000e32:	e006      	b.n	8000e42 <Check_Row+0xca>
				case ROW3:
					Nkey = 0x04;
 8000e34:	2304      	movs	r3, #4
 8000e36:	73fb      	strb	r3, [r7, #15]
					break;
 8000e38:	e003      	b.n	8000e42 <Check_Row+0xca>
				case ROW4:
					Nkey = 0x04;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	73fb      	strb	r3, [r7, #15]
					break;
 8000e3e:	e000      	b.n	8000e42 <Check_Row+0xca>
			}
		}
 8000e40:	bf00      	nop
		if( !(kbd_in & 0x20) ) {
 8000e42:	7b7b      	ldrb	r3, [r7, #13]
 8000e44:	f003 0320 	and.w	r3, r3, #32
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d123      	bne.n	8000e94 <Check_Row+0x11c>
			switch (Nrow) {
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	3bf7      	subs	r3, #247	; 0xf7
 8000e50:	2b07      	cmp	r3, #7
 8000e52:	d820      	bhi.n	8000e96 <Check_Row+0x11e>
 8000e54:	a201      	add	r2, pc, #4	; (adr r2, 8000e5c <Check_Row+0xe4>)
 8000e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5a:	bf00      	nop
 8000e5c:	08000e8f 	.word	0x08000e8f
 8000e60:	08000e97 	.word	0x08000e97
 8000e64:	08000e97 	.word	0x08000e97
 8000e68:	08000e97 	.word	0x08000e97
 8000e6c:	08000e89 	.word	0x08000e89
 8000e70:	08000e97 	.word	0x08000e97
 8000e74:	08000e83 	.word	0x08000e83
 8000e78:	08000e7d 	.word	0x08000e7d
				case ROW1:
					Nkey = 0x02;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	73fb      	strb	r3, [r7, #15]
					break;
 8000e80:	e009      	b.n	8000e96 <Check_Row+0x11e>
				case ROW2:
					Nkey = 0x02;
 8000e82:	2302      	movs	r3, #2
 8000e84:	73fb      	strb	r3, [r7, #15]
					break;
 8000e86:	e006      	b.n	8000e96 <Check_Row+0x11e>
				case ROW3:
					Nkey = 0x02;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	73fb      	strb	r3, [r7, #15]
					break;
 8000e8c:	e003      	b.n	8000e96 <Check_Row+0x11e>
				case ROW4:
					Nkey = 0x02;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	73fb      	strb	r3, [r7, #15]
					break;
 8000e92:	e000      	b.n	8000e96 <Check_Row+0x11e>
			}
		}
 8000e94:	bf00      	nop
		if( !(kbd_in & 0x40) ) {
 8000e96:	7b7b      	ldrb	r3, [r7, #13]
 8000e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d126      	bne.n	8000eee <Check_Row+0x176>
			switch (Nrow) {
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	3bf7      	subs	r3, #247	; 0xf7
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	d823      	bhi.n	8000ef0 <Check_Row+0x178>
 8000ea8:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <Check_Row+0x138>)
 8000eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eae:	bf00      	nop
 8000eb0:	08000ee3 	.word	0x08000ee3
 8000eb4:	08000ef1 	.word	0x08000ef1
 8000eb8:	08000ef1 	.word	0x08000ef1
 8000ebc:	08000ef1 	.word	0x08000ef1
 8000ec0:	08000edd 	.word	0x08000edd
 8000ec4:	08000ef1 	.word	0x08000ef1
 8000ec8:	08000ed7 	.word	0x08000ed7
 8000ecc:	08000ed1 	.word	0x08000ed1
				case ROW1:
					Nkey = 0x01;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
					break;
 8000ed4:	e00c      	b.n	8000ef0 <Check_Row+0x178>
				case ROW2:
					Nkey = 0x01;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	73fb      	strb	r3, [r7, #15]
					break;
 8000eda:	e009      	b.n	8000ef0 <Check_Row+0x178>
				case ROW3:
					Nkey = 0x01;
 8000edc:	2301      	movs	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
					break;
 8000ee0:	e006      	b.n	8000ef0 <Check_Row+0x178>
				case ROW4:
					Nkey = 0x01;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
					break;
 8000ee6:	e003      	b.n	8000ef0 <Check_Row+0x178>
			}
		}
	}
	else Nkey = 0x00;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e000      	b.n	8000ef0 <Check_Row+0x178>
		}
 8000eee:	bf00      	nop

	return Nkey;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	08003d9c 	.word	0x08003d9c
 8000f00:	08003db0 	.word	0x08003db0
 8000f04:	08003dc4 	.word	0x08003dc4

08000f08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f0c:	f000 fbf2 	bl	80016f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f10:	f000 f80e 	bl	8000f30 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f14:	f7ff fe60 	bl	8000bd8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000f18:	f7ff fe86 	bl	8000c28 <MX_I2C1_Init>
	MX_USART6_UART_Init();
 8000f1c:	f000 fb4e 	bl	80015bc <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	oled_Init();
 8000f20:	f000 f89e 	bl	8001060 <oled_Init>

	oled_Reset();
 8000f24:	f000 f88e 	bl	8001044 <oled_Reset>
	while (1) {

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		run();
 8000f28:	f7ff fbac 	bl	8000684 <run>
 8000f2c:	e7fc      	b.n	8000f28 <main+0x20>
	...

08000f30 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fefe 	bl	8003d40 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b22      	ldr	r3, [pc, #136]	; (8001000 <SystemClock_Config+0xd0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a21      	ldr	r2, [pc, #132]	; (8001000 <SystemClock_Config+0xd0>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <SystemClock_Config+0xd0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000fa0:	2319      	movs	r3, #25
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000fa4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fe84 	bl	8002cc4 <HAL_RCC_OscConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x96>
		Error_Handler();
 8000fc2:	f000 f81f 	bl	8001004 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fd6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fdc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	2105      	movs	r1, #5
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 f8e5 	bl	80031b4 <HAL_RCC_ClockConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0xc4>
		Error_Handler();
 8000ff0:	f000 f808 	bl	8001004 <Error_Handler>
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	3750      	adds	r7, #80	; 0x50
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000

08001004 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <oled_WriteCommand>:
static uint8_t OLED_Buffer[1024];

static OLED_t OLED;


static void oled_WriteCommand(uint8_t command) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af04      	add	r7, sp, #16
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 800101e:	230a      	movs	r3, #10
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2301      	movs	r3, #1
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	2200      	movs	r2, #0
 800102e:	2178      	movs	r1, #120	; 0x78
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <oled_WriteCommand+0x2c>)
 8001032:	f000 ffcb 	bl	8001fcc <HAL_I2C_Mem_Write>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000038 	.word	0x20000038

08001044 <oled_Reset>:

void oled_Reset( void ) {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	oled_Fill(Black);
 8001048:	2000      	movs	r0, #0
 800104a:	f000 f875 	bl	8001138 <oled_Fill>
	oled_SetCursor(0, 0);
 800104e:	2100      	movs	r1, #0
 8001050:	2000      	movs	r0, #0
 8001052:	f000 f9cb 	bl	80013ec <oled_SetCursor>
	oled_UpdateScreen();
 8001056:	f000 f893 	bl	8001180 <oled_UpdateScreen>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <oled_Init>:

uint8_t oled_Init(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001064:	2064      	movs	r0, #100	; 0x64
 8001066:	f000 fbb7 	bl	80017d8 <HAL_Delay>

	oled_WriteCommand(0xAE);
 800106a:	20ae      	movs	r0, #174	; 0xae
 800106c:	f7ff ffd2 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 8001070:	2020      	movs	r0, #32
 8001072:	f7ff ffcf 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 8001076:	2010      	movs	r0, #16
 8001078:	f7ff ffcc 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0xB0);
 800107c:	20b0      	movs	r0, #176	; 0xb0
 800107e:	f7ff ffc9 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0xC8);
 8001082:	20c8      	movs	r0, #200	; 0xc8
 8001084:	f7ff ffc6 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff ffc3 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 800108e:	2010      	movs	r0, #16
 8001090:	f7ff ffc0 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0x40);
 8001094:	2040      	movs	r0, #64	; 0x40
 8001096:	f7ff ffbd 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0x81);
 800109a:	2081      	movs	r0, #129	; 0x81
 800109c:	f7ff ffba 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0xFF);
 80010a0:	20ff      	movs	r0, #255	; 0xff
 80010a2:	f7ff ffb7 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0xA1);
 80010a6:	20a1      	movs	r0, #161	; 0xa1
 80010a8:	f7ff ffb4 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0xA6);
 80010ac:	20a6      	movs	r0, #166	; 0xa6
 80010ae:	f7ff ffb1 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0xA8);
 80010b2:	20a8      	movs	r0, #168	; 0xa8
 80010b4:	f7ff ffae 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0x3F);
 80010b8:	203f      	movs	r0, #63	; 0x3f
 80010ba:	f7ff ffab 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0xA4);
 80010be:	20a4      	movs	r0, #164	; 0xa4
 80010c0:	f7ff ffa8 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0xD3);
 80010c4:	20d3      	movs	r0, #211	; 0xd3
 80010c6:	f7ff ffa5 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff ffa2 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0xD5);
 80010d0:	20d5      	movs	r0, #213	; 0xd5
 80010d2:	f7ff ff9f 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0xF0);
 80010d6:	20f0      	movs	r0, #240	; 0xf0
 80010d8:	f7ff ff9c 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0xD9);
 80010dc:	20d9      	movs	r0, #217	; 0xd9
 80010de:	f7ff ff99 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0x22);
 80010e2:	2022      	movs	r0, #34	; 0x22
 80010e4:	f7ff ff96 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0xDA);
 80010e8:	20da      	movs	r0, #218	; 0xda
 80010ea:	f7ff ff93 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0x12);
 80010ee:	2012      	movs	r0, #18
 80010f0:	f7ff ff90 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0xDB);
 80010f4:	20db      	movs	r0, #219	; 0xdb
 80010f6:	f7ff ff8d 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 80010fa:	2020      	movs	r0, #32
 80010fc:	f7ff ff8a 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0x8D);
 8001100:	208d      	movs	r0, #141	; 0x8d
 8001102:	f7ff ff87 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0x14);
 8001106:	2014      	movs	r0, #20
 8001108:	f7ff ff84 	bl	8001014 <oled_WriteCommand>
	oled_WriteCommand(0xAF);
 800110c:	20af      	movs	r0, #175	; 0xaf
 800110e:	f7ff ff81 	bl	8001014 <oled_WriteCommand>

	oled_Fill(Black);
 8001112:	2000      	movs	r0, #0
 8001114:	f000 f810 	bl	8001138 <oled_Fill>

	oled_UpdateScreen();
 8001118:	f000 f832 	bl	8001180 <oled_UpdateScreen>

	OLED.CurrentX = 0;
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <oled_Init+0xd4>)
 800111e:	2200      	movs	r2, #0
 8001120:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <oled_Init+0xd4>)
 8001124:	2200      	movs	r2, #0
 8001126:	805a      	strh	r2, [r3, #2]

	OLED.Initialized = 1;
 8001128:	4b02      	ldr	r3, [pc, #8]	; (8001134 <oled_Init+0xd4>)
 800112a:	2201      	movs	r2, #1
 800112c:	715a      	strb	r2, [r3, #5]

	return 1;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000048c 	.word	0x2000048c

08001138 <oled_Fill>:

void oled_Fill(OLED_COLOR color) {
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	uint32_t i;

	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	e00d      	b.n	8001164 <oled_Fill+0x2c>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <oled_Fill+0x1a>
 800114e:	2100      	movs	r1, #0
 8001150:	e000      	b.n	8001154 <oled_Fill+0x1c>
 8001152:	21ff      	movs	r1, #255	; 0xff
 8001154:	4a09      	ldr	r2, [pc, #36]	; (800117c <oled_Fill+0x44>)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	460a      	mov	r2, r1
 800115c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3301      	adds	r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800116a:	d3ed      	bcc.n	8001148 <oled_Fill+0x10>
	}
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000008c 	.word	0x2000008c

08001180 <oled_UpdateScreen>:


void oled_UpdateScreen(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8001186:	2300      	movs	r3, #0
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	e01d      	b.n	80011c8 <oled_UpdateScreen+0x48>
		oled_WriteCommand(0xB0 + i);
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	3b50      	subs	r3, #80	; 0x50
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff3e 	bl	8001014 <oled_WriteCommand>
		oled_WriteCommand(0x00);
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff ff3b 	bl	8001014 <oled_WriteCommand>
		oled_WriteCommand(0x10);
 800119e:	2010      	movs	r0, #16
 80011a0:	f7ff ff38 	bl	8001014 <oled_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,25);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	01db      	lsls	r3, r3, #7
 80011a8:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <oled_UpdateScreen+0x58>)
 80011aa:	4413      	add	r3, r2
 80011ac:	2219      	movs	r2, #25
 80011ae:	9202      	str	r2, [sp, #8]
 80011b0:	2280      	movs	r2, #128	; 0x80
 80011b2:	9201      	str	r2, [sp, #4]
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	2240      	movs	r2, #64	; 0x40
 80011ba:	2178      	movs	r1, #120	; 0x78
 80011bc:	4807      	ldr	r0, [pc, #28]	; (80011dc <oled_UpdateScreen+0x5c>)
 80011be:	f000 ff05 	bl	8001fcc <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	3301      	adds	r3, #1
 80011c6:	71fb      	strb	r3, [r7, #7]
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b07      	cmp	r3, #7
 80011cc:	d9de      	bls.n	800118c <oled_UpdateScreen+0xc>
	}
}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2000008c 	.word	0x2000008c
 80011dc:	20000038 	.word	0x20000038

080011e0 <oled_DrawPixel>:

void oled_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	460b      	mov	r3, r1
 80011ec:	71bb      	strb	r3, [r7, #6]
 80011ee:	4613      	mov	r3, r2
 80011f0:	717b      	strb	r3, [r7, #5]
	if (x >= OLED_WIDTH || y >= OLED_HEIGHT) {
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db48      	blt.n	800128c <oled_DrawPixel+0xac>
 80011fa:	79bb      	ldrb	r3, [r7, #6]
 80011fc:	2b3f      	cmp	r3, #63	; 0x3f
 80011fe:	d845      	bhi.n	800128c <oled_DrawPixel+0xac>
		return;
	}

	if (OLED.Inverted) {
 8001200:	4b25      	ldr	r3, [pc, #148]	; (8001298 <oled_DrawPixel+0xb8>)
 8001202:	791b      	ldrb	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <oled_DrawPixel+0x36>
		color = (OLED_COLOR)!color;
 8001208:	797b      	ldrb	r3, [r7, #5]
 800120a:	2b00      	cmp	r3, #0
 800120c:	bf0c      	ite	eq
 800120e:	2301      	moveq	r3, #1
 8001210:	2300      	movne	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	717b      	strb	r3, [r7, #5]
	}

	if (color == White) {
 8001216:	797b      	ldrb	r3, [r7, #5]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d11a      	bne.n	8001252 <oled_DrawPixel+0x72>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	08db      	lsrs	r3, r3, #3
 8001222:	b2d8      	uxtb	r0, r3
 8001224:	4603      	mov	r3, r0
 8001226:	01db      	lsls	r3, r3, #7
 8001228:	4413      	add	r3, r2
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <oled_DrawPixel+0xbc>)
 800122c:	5cd3      	ldrb	r3, [r2, r3]
 800122e:	b25a      	sxtb	r2, r3
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	b25b      	sxtb	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b259      	sxtb	r1, r3
 8001242:	79fa      	ldrb	r2, [r7, #7]
 8001244:	4603      	mov	r3, r0
 8001246:	01db      	lsls	r3, r3, #7
 8001248:	4413      	add	r3, r2
 800124a:	b2c9      	uxtb	r1, r1
 800124c:	4a13      	ldr	r2, [pc, #76]	; (800129c <oled_DrawPixel+0xbc>)
 800124e:	54d1      	strb	r1, [r2, r3]
 8001250:	e01d      	b.n	800128e <oled_DrawPixel+0xae>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 8001252:	79fa      	ldrb	r2, [r7, #7]
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	08db      	lsrs	r3, r3, #3
 8001258:	b2d8      	uxtb	r0, r3
 800125a:	4603      	mov	r3, r0
 800125c:	01db      	lsls	r3, r3, #7
 800125e:	4413      	add	r3, r2
 8001260:	4a0e      	ldr	r2, [pc, #56]	; (800129c <oled_DrawPixel+0xbc>)
 8001262:	5cd3      	ldrb	r3, [r2, r3]
 8001264:	b25a      	sxtb	r2, r3
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	2101      	movs	r1, #1
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	b25b      	sxtb	r3, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	b25b      	sxtb	r3, r3
 8001278:	4013      	ands	r3, r2
 800127a:	b259      	sxtb	r1, r3
 800127c:	79fa      	ldrb	r2, [r7, #7]
 800127e:	4603      	mov	r3, r0
 8001280:	01db      	lsls	r3, r3, #7
 8001282:	4413      	add	r3, r2
 8001284:	b2c9      	uxtb	r1, r1
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <oled_DrawPixel+0xbc>)
 8001288:	54d1      	strb	r1, [r2, r3]
 800128a:	e000      	b.n	800128e <oled_DrawPixel+0xae>
		return;
 800128c:	bf00      	nop
	}
}
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	2000048c 	.word	0x2000048c
 800129c:	2000008c 	.word	0x2000008c

080012a0 <oled_WriteChar>:
	oled_DrawHLine(x1, x2, y1, color);
	oled_DrawHLine(x1, x2, y2, color);
	oled_DrawVLine(y1, y2, x1, color);
	oled_DrawVLine(y1, y2, x2, color);
}
char oled_WriteChar(char ch, FontDef Font, OLED_COLOR color) {
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4604      	mov	r4, r0
 80012a8:	1d38      	adds	r0, r7, #4
 80012aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80012ae:	461a      	mov	r2, r3
 80012b0:	4623      	mov	r3, r4
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	4613      	mov	r3, r2
 80012b6:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 80012b8:	4b38      	ldr	r3, [pc, #224]	; (800139c <oled_WriteChar+0xfc>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	793b      	ldrb	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	2b7f      	cmp	r3, #127	; 0x7f
 80012c4:	dc06      	bgt.n	80012d4 <oled_WriteChar+0x34>
			OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight)) {
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <oled_WriteChar+0xfc>)
 80012c8:	885b      	ldrh	r3, [r3, #2]
 80012ca:	461a      	mov	r2, r3
 80012cc:	797b      	ldrb	r3, [r7, #5]
 80012ce:	4413      	add	r3, r2
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 80012d0:	2b3f      	cmp	r3, #63	; 0x3f
 80012d2:	dd01      	ble.n	80012d8 <oled_WriteChar+0x38>
		return 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	e05d      	b.n	8001394 <oled_WriteChar+0xf4>
	}

	for (i = 0; i < Font.FontHeight; i++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	e04c      	b.n	8001378 <oled_WriteChar+0xd8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	3b20      	subs	r3, #32
 80012e4:	7979      	ldrb	r1, [r7, #5]
 80012e6:	fb01 f303 	mul.w	r3, r1, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	440b      	add	r3, r1
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
 80012fc:	e034      	b.n	8001368 <oled_WriteChar+0xc8>
			if ((b << j) & 0x8000) {
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d012      	beq.n	8001334 <oled_WriteChar+0x94>
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <oled_WriteChar+0xfc>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4413      	add	r3, r2
 800131a:	b2d8      	uxtb	r0, r3
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <oled_WriteChar+0xfc>)
 800131e:	885b      	ldrh	r3, [r3, #2]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4413      	add	r3, r2
 8001328:	b2db      	uxtb	r3, r3
 800132a:	7bba      	ldrb	r2, [r7, #14]
 800132c:	4619      	mov	r1, r3
 800132e:	f7ff ff57 	bl	80011e0 <oled_DrawPixel>
 8001332:	e016      	b.n	8001362 <oled_WriteChar+0xc2>
			} else {
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <oled_WriteChar+0xfc>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4413      	add	r3, r2
 8001340:	b2d8      	uxtb	r0, r3
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <oled_WriteChar+0xfc>)
 8001344:	885b      	ldrh	r3, [r3, #2]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4413      	add	r3, r2
 800134e:	b2d9      	uxtb	r1, r3
 8001350:	7bbb      	ldrb	r3, [r7, #14]
 8001352:	2b00      	cmp	r3, #0
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	f7ff ff3f 	bl	80011e0 <oled_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	3301      	adds	r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	793b      	ldrb	r3, [r7, #4]
 800136a:	461a      	mov	r2, r3
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	4293      	cmp	r3, r2
 8001370:	d3c5      	bcc.n	80012fe <oled_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++) {
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3301      	adds	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	797b      	ldrb	r3, [r7, #5]
 800137a:	461a      	mov	r2, r3
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	4293      	cmp	r3, r2
 8001380:	d3ad      	bcc.n	80012de <oled_WriteChar+0x3e>
			}
		}
	}

	OLED.CurrentX += Font.FontWidth;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <oled_WriteChar+0xfc>)
 8001384:	881a      	ldrh	r2, [r3, #0]
 8001386:	793b      	ldrb	r3, [r7, #4]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b03      	ldr	r3, [pc, #12]	; (800139c <oled_WriteChar+0xfc>)
 8001390:	801a      	strh	r2, [r3, #0]

	return ch;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3724      	adds	r7, #36	; 0x24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}
 800139c:	2000048c 	.word	0x2000048c

080013a0 <oled_WriteString>:

char oled_WriteString(char* str, FontDef Font, OLED_COLOR color) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	1d38      	adds	r0, r7, #4
 80013aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80013ae:	70fb      	strb	r3, [r7, #3]
	while (*str) {
 80013b0:	e012      	b.n	80013d8 <oled_WriteString+0x38>
		if (oled_WriteChar(*str, Font, color) != *str) {
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	7818      	ldrb	r0, [r3, #0]
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	1d3a      	adds	r2, r7, #4
 80013ba:	ca06      	ldmia	r2, {r1, r2}
 80013bc:	f7ff ff70 	bl	80012a0 <oled_WriteChar>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d002      	beq.n	80013d2 <oled_WriteString+0x32>
			return *str;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	e008      	b.n	80013e4 <oled_WriteString+0x44>
		}
		str++;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3301      	adds	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e8      	bne.n	80013b2 <oled_WriteString+0x12>
	}
	return *str;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	781b      	ldrb	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <oled_SetCursor>:

void oled_SetCursor(uint8_t x, uint8_t y) {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71bb      	strb	r3, [r7, #6]
	OLED.CurrentX = x;
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <oled_SetCursor+0x2c>)
 8001402:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = y;
 8001404:	79bb      	ldrb	r3, [r7, #6]
 8001406:	b29a      	uxth	r2, r3
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <oled_SetCursor+0x2c>)
 800140a:	805a      	strh	r2, [r3, #2]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	2000048c 	.word	0x2000048c

0800141c <PCA9538_Read_Register>:
#include "main.h"
#include "i2c.h"
#include "sdk_uart.h"
#include "pca9538.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af04      	add	r7, sp, #16
 8001422:	4603      	mov	r3, r0
 8001424:	603a      	str	r2, [r7, #0]
 8001426:	80fb      	strh	r3, [r7, #6]
 8001428:	460b      	mov	r3, r1
 800142a:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	b299      	uxth	r1, r3
 8001434:	797b      	ldrb	r3, [r7, #5]
 8001436:	b29a      	uxth	r2, r3
 8001438:	2364      	movs	r3, #100	; 0x64
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	2301      	movs	r3, #1
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2301      	movs	r3, #1
 8001446:	4804      	ldr	r0, [pc, #16]	; (8001458 <PCA9538_Read_Register+0x3c>)
 8001448:	f000 feba 	bl	80021c0 <HAL_I2C_Mem_Read>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000038 	.word	0x20000038

0800145c <PCA9538_Write_Register>:


HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af04      	add	r7, sp, #16
 8001462:	4603      	mov	r3, r0
 8001464:	603a      	str	r2, [r7, #0]
 8001466:	80fb      	strh	r3, [r7, #6]
 8001468:	460b      	mov	r3, r1
 800146a:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	f023 0301 	bic.w	r3, r3, #1
 8001472:	b299      	uxth	r1, r3
 8001474:	797b      	ldrb	r3, [r7, #5]
 8001476:	b29a      	uxth	r2, r3
 8001478:	2364      	movs	r3, #100	; 0x64
 800147a:	9302      	str	r3, [sp, #8]
 800147c:	2301      	movs	r3, #1
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2301      	movs	r3, #1
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <PCA9538_Write_Register+0x3c>)
 8001488:	f000 fda0 	bl	8001fcc <HAL_I2C_Mem_Write>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000038 	.word	0x20000038

0800149c <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t* buf) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	80fb      	strh	r3, [r7, #6]
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ffb4 	bl	800141c <PCA9538_Read_Register>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <UART_Transmit>:
#include "sdk_uart.h"
#include "usart.h"
#include <string.h>


void UART_Transmit(uint8_t data[]){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, data, strlen((const char*)data), 1000);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7fe fe8f 	bl	80001ec <strlen>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4803      	ldr	r0, [pc, #12]	; (80014e8 <UART_Transmit+0x28>)
 80014da:	f002 f898 	bl	800360e <HAL_UART_Transmit>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000494 	.word	0x20000494

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_MspInit+0x4c>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_MspInit+0x4c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 f902 	bl	8001798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <SystemInit+0x20>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <SystemInit+0x20>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <MX_USART6_UART_Init+0x50>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USART6_UART_Init+0x4c>)
 80015f4:	f001 ffbe 	bl	8003574 <HAL_UART_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80015fe:	f7ff fd01 	bl	8001004 <Error_Handler>
  }

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000494 	.word	0x20000494
 800160c:	40011400 	.word	0x40011400

08001610 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a19      	ldr	r2, [pc, #100]	; (8001694 <HAL_UART_MspInit+0x84>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d12b      	bne.n	800168a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_UART_MspInit+0x88>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a17      	ldr	r2, [pc, #92]	; (8001698 <HAL_UART_MspInit+0x88>)
 800163c:	f043 0320 	orr.w	r3, r3, #32
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_UART_MspInit+0x88>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_UART_MspInit+0x88>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <HAL_UART_MspInit+0x88>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_UART_MspInit+0x88>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800166a:	23c0      	movs	r3, #192	; 0xc0
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800167a:	2308      	movs	r3, #8
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <HAL_UART_MspInit+0x8c>)
 8001686:	f000 f9b1 	bl	80019ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40011400 	.word	0x40011400
 8001698:	40023800 	.word	0x40023800
 800169c:	40020800 	.word	0x40020800

080016a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a4:	480d      	ldr	r0, [pc, #52]	; (80016dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016a6:	490e      	ldr	r1, [pc, #56]	; (80016e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016a8:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ac:	e002      	b.n	80016b4 <LoopCopyDataInit>

080016ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b2:	3304      	adds	r3, #4

080016b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b8:	d3f9      	bcc.n	80016ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ba:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016bc:	4c0b      	ldr	r4, [pc, #44]	; (80016ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c0:	e001      	b.n	80016c6 <LoopFillZerobss>

080016c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c4:	3204      	adds	r2, #4

080016c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c8:	d3fb      	bcc.n	80016c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016ca:	f7ff ff65 	bl	8001598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ce:	f002 fb13 	bl	8003cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d2:	f7ff fc19 	bl	8000f08 <main>
  bx  lr
 80016d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80016e4:	080052c0 	.word	0x080052c0
  ldr r2, =_sbss
 80016e8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80016ec:	200004dc 	.word	0x200004dc

080016f0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f0:	e7fe      	b.n	80016f0 <ADC_IRQHandler>
	...

080016f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <HAL_Init+0x40>)
 80016fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001702:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_Init+0x40>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_Init+0x40>)
 800170a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_Init+0x40>)
 8001716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171c:	2003      	movs	r0, #3
 800171e:	f000 f931 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001722:	200f      	movs	r0, #15
 8001724:	f000 f808 	bl	8001738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001728:	f7ff fee0 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023c00 	.word	0x40023c00

08001738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x54>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_InitTick+0x58>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f000 f93b 	bl	80019d2 <HAL_SYSTICK_Config>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e00e      	b.n	8001784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b0f      	cmp	r3, #15
 800176a:	d80a      	bhi.n	8001782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800176c:	2200      	movs	r2, #0
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f000 f911 	bl	800199a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001778:	4a06      	ldr	r2, [pc, #24]	; (8001794 <HAL_InitTick+0x5c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e000      	b.n	8001784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000010 	.word	0x20000010
 8001790:	20000018 	.word	0x20000018
 8001794:	20000014 	.word	0x20000014

08001798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x20>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_IncTick+0x24>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_IncTick+0x24>)
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000018 	.word	0x20000018
 80017bc:	200004d8 	.word	0x200004d8

080017c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_GetTick+0x14>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	200004d8 	.word	0x200004d8

080017d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff ffee 	bl	80017c0 <HAL_GetTick>
 80017e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f0:	d005      	beq.n	80017fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_Delay+0x44>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017fe:	bf00      	nop
 8001800:	f7ff ffde 	bl	80017c0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	429a      	cmp	r2, r3
 800180e:	d8f7      	bhi.n	8001800 <HAL_Delay+0x28>
  {
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000018 	.word	0x20000018

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001950:	d301      	bcc.n	8001956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001952:	2301      	movs	r3, #1
 8001954:	e00f      	b.n	8001976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <SysTick_Config+0x40>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195e:	210f      	movs	r1, #15
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f7ff ff8e 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <SysTick_Config+0x40>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SysTick_Config+0x40>)
 8001970:	2207      	movs	r2, #7
 8001972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	e000e010 	.word	0xe000e010

08001984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff47 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ac:	f7ff ff5c 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	6978      	ldr	r0, [r7, #20]
 80019b8:	f7ff ff8e 	bl	80018d8 <NVIC_EncodePriority>
 80019bc:	4602      	mov	r2, r0
 80019be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff5d 	bl	8001884 <__NVIC_SetPriority>
}
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffb0 	bl	8001940 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	e177      	b.n	8001cf8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f040 8166 	bne.w	8001cf2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d005      	beq.n	8001a3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d130      	bne.n	8001aa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	2203      	movs	r2, #3
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a74:	2201      	movs	r2, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	f003 0201 	and.w	r2, r3, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d017      	beq.n	8001adc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d123      	bne.n	8001b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	69b9      	ldr	r1, [r7, #24]
 8001b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80c0 	beq.w	8001cf2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b66      	ldr	r3, [pc, #408]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a65      	ldr	r2, [pc, #404]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b63      	ldr	r3, [pc, #396]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b8e:	4a61      	ldr	r2, [pc, #388]	; (8001d14 <HAL_GPIO_Init+0x328>)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <HAL_GPIO_Init+0x32c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d037      	beq.n	8001c2a <HAL_GPIO_Init+0x23e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a57      	ldr	r2, [pc, #348]	; (8001d1c <HAL_GPIO_Init+0x330>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d031      	beq.n	8001c26 <HAL_GPIO_Init+0x23a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a56      	ldr	r2, [pc, #344]	; (8001d20 <HAL_GPIO_Init+0x334>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d02b      	beq.n	8001c22 <HAL_GPIO_Init+0x236>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a55      	ldr	r2, [pc, #340]	; (8001d24 <HAL_GPIO_Init+0x338>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d025      	beq.n	8001c1e <HAL_GPIO_Init+0x232>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a54      	ldr	r2, [pc, #336]	; (8001d28 <HAL_GPIO_Init+0x33c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d01f      	beq.n	8001c1a <HAL_GPIO_Init+0x22e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a53      	ldr	r2, [pc, #332]	; (8001d2c <HAL_GPIO_Init+0x340>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d019      	beq.n	8001c16 <HAL_GPIO_Init+0x22a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a52      	ldr	r2, [pc, #328]	; (8001d30 <HAL_GPIO_Init+0x344>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <HAL_GPIO_Init+0x226>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a51      	ldr	r2, [pc, #324]	; (8001d34 <HAL_GPIO_Init+0x348>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00d      	beq.n	8001c0e <HAL_GPIO_Init+0x222>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a50      	ldr	r2, [pc, #320]	; (8001d38 <HAL_GPIO_Init+0x34c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d007      	beq.n	8001c0a <HAL_GPIO_Init+0x21e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4f      	ldr	r2, [pc, #316]	; (8001d3c <HAL_GPIO_Init+0x350>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d101      	bne.n	8001c06 <HAL_GPIO_Init+0x21a>
 8001c02:	2309      	movs	r3, #9
 8001c04:	e012      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c06:	230a      	movs	r3, #10
 8001c08:	e010      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	e00e      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c0e:	2307      	movs	r3, #7
 8001c10:	e00c      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c12:	2306      	movs	r3, #6
 8001c14:	e00a      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3c:	4935      	ldr	r1, [pc, #212]	; (8001d14 <HAL_GPIO_Init+0x328>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6e:	4a34      	ldr	r2, [pc, #208]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c74:	4b32      	ldr	r3, [pc, #200]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c98:	4a29      	ldr	r2, [pc, #164]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9e:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc2:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f ae84 	bls.w	8001a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40021400 	.word	0x40021400
 8001d30:	40021800 	.word	0x40021800
 8001d34:	40021c00 	.word	0x40021c00
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40022400 	.word	0x40022400
 8001d40:	40013c00 	.word	0x40013c00

08001d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e12b      	b.n	8001fae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe ff8a 	bl	8000c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2224      	movs	r2, #36	; 0x24
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001da6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001da8:	f001 fbbc 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 8001dac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a81      	ldr	r2, [pc, #516]	; (8001fb8 <HAL_I2C_Init+0x274>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d807      	bhi.n	8001dc8 <HAL_I2C_Init+0x84>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4a80      	ldr	r2, [pc, #512]	; (8001fbc <HAL_I2C_Init+0x278>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	bf94      	ite	ls
 8001dc0:	2301      	movls	r3, #1
 8001dc2:	2300      	movhi	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	e006      	b.n	8001dd6 <HAL_I2C_Init+0x92>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4a7d      	ldr	r2, [pc, #500]	; (8001fc0 <HAL_I2C_Init+0x27c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	bf94      	ite	ls
 8001dd0:	2301      	movls	r3, #1
 8001dd2:	2300      	movhi	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0e7      	b.n	8001fae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4a78      	ldr	r2, [pc, #480]	; (8001fc4 <HAL_I2C_Init+0x280>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0c9b      	lsrs	r3, r3, #18
 8001de8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4a6a      	ldr	r2, [pc, #424]	; (8001fb8 <HAL_I2C_Init+0x274>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d802      	bhi.n	8001e18 <HAL_I2C_Init+0xd4>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	3301      	adds	r3, #1
 8001e16:	e009      	b.n	8001e2c <HAL_I2C_Init+0xe8>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	4a69      	ldr	r2, [pc, #420]	; (8001fc8 <HAL_I2C_Init+0x284>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	099b      	lsrs	r3, r3, #6
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	495c      	ldr	r1, [pc, #368]	; (8001fb8 <HAL_I2C_Init+0x274>)
 8001e48:	428b      	cmp	r3, r1
 8001e4a:	d819      	bhi.n	8001e80 <HAL_I2C_Init+0x13c>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1e59      	subs	r1, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e5a:	1c59      	adds	r1, r3, #1
 8001e5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e60:	400b      	ands	r3, r1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_I2C_Init+0x138>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1e59      	subs	r1, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7a:	e051      	b.n	8001f20 <HAL_I2C_Init+0x1dc>
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	e04f      	b.n	8001f20 <HAL_I2C_Init+0x1dc>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d111      	bne.n	8001eac <HAL_I2C_Init+0x168>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1e58      	subs	r0, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	440b      	add	r3, r1
 8001e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	e012      	b.n	8001ed2 <HAL_I2C_Init+0x18e>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1e58      	subs	r0, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6859      	ldr	r1, [r3, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	0099      	lsls	r1, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf0c      	ite	eq
 8001ecc:	2301      	moveq	r3, #1
 8001ece:	2300      	movne	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Init+0x196>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e022      	b.n	8001f20 <HAL_I2C_Init+0x1dc>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10e      	bne.n	8001f00 <HAL_I2C_Init+0x1bc>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1e58      	subs	r0, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6859      	ldr	r1, [r3, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	440b      	add	r3, r1
 8001ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efe:	e00f      	b.n	8001f20 <HAL_I2C_Init+0x1dc>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1e58      	subs	r0, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	0099      	lsls	r1, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	6809      	ldr	r1, [r1, #0]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69da      	ldr	r2, [r3, #28]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6911      	ldr	r1, [r2, #16]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68d2      	ldr	r2, [r2, #12]
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	000186a0 	.word	0x000186a0
 8001fbc:	001e847f 	.word	0x001e847f
 8001fc0:	003d08ff 	.word	0x003d08ff
 8001fc4:	431bde83 	.word	0x431bde83
 8001fc8:	10624dd3 	.word	0x10624dd3

08001fcc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	817b      	strh	r3, [r7, #10]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	813b      	strh	r3, [r7, #8]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fe6:	f7ff fbeb 	bl	80017c0 <HAL_GetTick>
 8001fea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	f040 80d9 	bne.w	80021ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2319      	movs	r3, #25
 8002000:	2201      	movs	r2, #1
 8002002:	496d      	ldr	r1, [pc, #436]	; (80021b8 <HAL_I2C_Mem_Write+0x1ec>)
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 fc7f 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002010:	2302      	movs	r3, #2
 8002012:	e0cc      	b.n	80021ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_I2C_Mem_Write+0x56>
 800201e:	2302      	movs	r3, #2
 8002020:	e0c5      	b.n	80021ae <HAL_I2C_Mem_Write+0x1e2>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b01      	cmp	r3, #1
 8002036:	d007      	beq.n	8002048 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002056:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2221      	movs	r2, #33	; 0x21
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2240      	movs	r2, #64	; 0x40
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a3a      	ldr	r2, [r7, #32]
 8002072:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4a4d      	ldr	r2, [pc, #308]	; (80021bc <HAL_I2C_Mem_Write+0x1f0>)
 8002088:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800208a:	88f8      	ldrh	r0, [r7, #6]
 800208c:	893a      	ldrh	r2, [r7, #8]
 800208e:	8979      	ldrh	r1, [r7, #10]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	4603      	mov	r3, r0
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 fab6 	bl	800260c <I2C_RequestMemoryWrite>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d052      	beq.n	800214c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e081      	b.n	80021ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 fd00 	bl	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00d      	beq.n	80020d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d107      	bne.n	80020d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e06b      	b.n	80021ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b04      	cmp	r3, #4
 8002112:	d11b      	bne.n	800214c <HAL_I2C_Mem_Write+0x180>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	d017      	beq.n	800214c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1aa      	bne.n	80020aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 fcec 	bl	8002b36 <I2C_WaitOnBTFFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00d      	beq.n	8002180 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	2b04      	cmp	r3, #4
 800216a:	d107      	bne.n	800217c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e016      	b.n	80021ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e000      	b.n	80021ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
  }
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	00100002 	.word	0x00100002
 80021bc:	ffff0000 	.word	0xffff0000

080021c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08c      	sub	sp, #48	; 0x30
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	817b      	strh	r3, [r7, #10]
 80021d2:	460b      	mov	r3, r1
 80021d4:	813b      	strh	r3, [r7, #8]
 80021d6:	4613      	mov	r3, r2
 80021d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021da:	f7ff faf1 	bl	80017c0 <HAL_GetTick>
 80021de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	f040 8208 	bne.w	80025fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2319      	movs	r3, #25
 80021f4:	2201      	movs	r2, #1
 80021f6:	497b      	ldr	r1, [pc, #492]	; (80023e4 <HAL_I2C_Mem_Read+0x224>)
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fb85 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002204:	2302      	movs	r3, #2
 8002206:	e1fb      	b.n	8002600 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_I2C_Mem_Read+0x56>
 8002212:	2302      	movs	r3, #2
 8002214:	e1f4      	b.n	8002600 <HAL_I2C_Mem_Read+0x440>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d007      	beq.n	800223c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800224a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2222      	movs	r2, #34	; 0x22
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2240      	movs	r2, #64	; 0x40
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800226c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a5b      	ldr	r2, [pc, #364]	; (80023e8 <HAL_I2C_Mem_Read+0x228>)
 800227c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800227e:	88f8      	ldrh	r0, [r7, #6]
 8002280:	893a      	ldrh	r2, [r7, #8]
 8002282:	8979      	ldrh	r1, [r7, #10]
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	4603      	mov	r3, r0
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fa52 	bl	8002738 <I2C_RequestMemoryRead>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e1b0      	b.n	8002600 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d113      	bne.n	80022ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	623b      	str	r3, [r7, #32]
 80022ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e184      	b.n	80025d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d11b      	bne.n	800230e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e164      	b.n	80025d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	2b02      	cmp	r3, #2
 8002314:	d11b      	bne.n	800234e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002324:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002334:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	e144      	b.n	80025d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002364:	e138      	b.n	80025d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236a:	2b03      	cmp	r3, #3
 800236c:	f200 80f1 	bhi.w	8002552 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002374:	2b01      	cmp	r3, #1
 8002376:	d123      	bne.n	80023c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fc1b 	bl	8002bb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e139      	b.n	8002600 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023be:	e10b      	b.n	80025d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d14e      	bne.n	8002466 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ce:	2200      	movs	r2, #0
 80023d0:	4906      	ldr	r1, [pc, #24]	; (80023ec <HAL_I2C_Mem_Read+0x22c>)
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fa98 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e10e      	b.n	8002600 <HAL_I2C_Mem_Read+0x440>
 80023e2:	bf00      	nop
 80023e4:	00100002 	.word	0x00100002
 80023e8:	ffff0000 	.word	0xffff0000
 80023ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002464:	e0b8      	b.n	80025d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246c:	2200      	movs	r2, #0
 800246e:	4966      	ldr	r1, [pc, #408]	; (8002608 <HAL_I2C_Mem_Read+0x448>)
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fa49 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0bf      	b.n	8002600 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800248e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c8:	2200      	movs	r2, #0
 80024ca:	494f      	ldr	r1, [pc, #316]	; (8002608 <HAL_I2C_Mem_Read+0x448>)
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fa1b 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e091      	b.n	8002600 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002550:	e042      	b.n	80025d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002554:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fb2e 	bl	8002bb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e04c      	b.n	8002600 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d118      	bne.n	80025d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f47f aec2 	bne.w	8002366 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80025fe:	2302      	movs	r3, #2
  }
}
 8002600:	4618      	mov	r0, r3
 8002602:	3728      	adds	r7, #40	; 0x28
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	00010004 	.word	0x00010004

0800260c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4603      	mov	r3, r0
 800261c:	817b      	strh	r3, [r7, #10]
 800261e:	460b      	mov	r3, r1
 8002620:	813b      	strh	r3, [r7, #8]
 8002622:	4613      	mov	r3, r2
 8002624:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002634:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	2200      	movs	r2, #0
 800263e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f960 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00d      	beq.n	800266a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800265c:	d103      	bne.n	8002666 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e05f      	b.n	800272a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800266a:	897b      	ldrh	r3, [r7, #10]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002678:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	6a3a      	ldr	r2, [r7, #32]
 800267e:	492d      	ldr	r1, [pc, #180]	; (8002734 <I2C_RequestMemoryWrite+0x128>)
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f998 	bl	80029b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e04c      	b.n	800272a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a8:	6a39      	ldr	r1, [r7, #32]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fa02 	bl	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00d      	beq.n	80026d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d107      	bne.n	80026ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e02b      	b.n	800272a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d105      	bne.n	80026e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026d8:	893b      	ldrh	r3, [r7, #8]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	611a      	str	r2, [r3, #16]
 80026e2:	e021      	b.n	8002728 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026e4:	893b      	ldrh	r3, [r7, #8]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	6a39      	ldr	r1, [r7, #32]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f9dc 	bl	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00d      	beq.n	800271e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	2b04      	cmp	r3, #4
 8002708:	d107      	bne.n	800271a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002718:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e005      	b.n	800272a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800271e:	893b      	ldrh	r3, [r7, #8]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	00010002 	.word	0x00010002

08002738 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	4608      	mov	r0, r1
 8002742:	4611      	mov	r1, r2
 8002744:	461a      	mov	r2, r3
 8002746:	4603      	mov	r3, r0
 8002748:	817b      	strh	r3, [r7, #10]
 800274a:	460b      	mov	r3, r1
 800274c:	813b      	strh	r3, [r7, #8]
 800274e:	4613      	mov	r3, r2
 8002750:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002760:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002770:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	2200      	movs	r2, #0
 800277a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f8c2 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00d      	beq.n	80027a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002798:	d103      	bne.n	80027a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0aa      	b.n	80028fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027a6:	897b      	ldrh	r3, [r7, #10]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	6a3a      	ldr	r2, [r7, #32]
 80027ba:	4952      	ldr	r1, [pc, #328]	; (8002904 <I2C_RequestMemoryRead+0x1cc>)
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f8fa 	bl	80029b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e097      	b.n	80028fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e4:	6a39      	ldr	r1, [r7, #32]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f964 	bl	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00d      	beq.n	800280e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d107      	bne.n	800280a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002808:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e076      	b.n	80028fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d105      	bne.n	8002820 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002814:	893b      	ldrh	r3, [r7, #8]
 8002816:	b2da      	uxtb	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	611a      	str	r2, [r3, #16]
 800281e:	e021      	b.n	8002864 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002820:	893b      	ldrh	r3, [r7, #8]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	b29b      	uxth	r3, r3
 8002826:	b2da      	uxtb	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	6a39      	ldr	r1, [r7, #32]
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f93e 	bl	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00d      	beq.n	800285a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	2b04      	cmp	r3, #4
 8002844:	d107      	bne.n	8002856 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002854:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e050      	b.n	80028fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800285a:	893b      	ldrh	r3, [r7, #8]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002866:	6a39      	ldr	r1, [r7, #32]
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f923 	bl	8002ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00d      	beq.n	8002890 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	2b04      	cmp	r3, #4
 800287a:	d107      	bne.n	800288c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e035      	b.n	80028fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800289e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f82b 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00d      	beq.n	80028d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c6:	d103      	bne.n	80028d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e013      	b.n	80028fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028d4:	897b      	ldrh	r3, [r7, #10]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	6a3a      	ldr	r2, [r7, #32]
 80028e8:	4906      	ldr	r1, [pc, #24]	; (8002904 <I2C_RequestMemoryRead+0x1cc>)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f863 	bl	80029b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	00010002 	.word	0x00010002

08002908 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002918:	e025      	b.n	8002966 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d021      	beq.n	8002966 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002922:	f7fe ff4d 	bl	80017c0 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d302      	bcc.n	8002938 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d116      	bne.n	8002966 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f043 0220 	orr.w	r2, r3, #32
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e023      	b.n	80029ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10d      	bne.n	800298c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4013      	ands	r3, r2
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf0c      	ite	eq
 8002982:	2301      	moveq	r3, #1
 8002984:	2300      	movne	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	e00c      	b.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4013      	ands	r3, r2
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	bf0c      	ite	eq
 800299e:	2301      	moveq	r3, #1
 80029a0:	2300      	movne	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d0b6      	beq.n	800291a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029c4:	e051      	b.n	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d4:	d123      	bne.n	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f043 0204 	orr.w	r2, r3, #4
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e046      	b.n	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a24:	d021      	beq.n	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a26:	f7fe fecb 	bl	80017c0 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d302      	bcc.n	8002a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d116      	bne.n	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f043 0220 	orr.w	r2, r3, #32
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e020      	b.n	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d10c      	bne.n	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bf14      	ite	ne
 8002a86:	2301      	movne	r3, #1
 8002a88:	2300      	moveq	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	e00b      	b.n	8002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	43da      	mvns	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d18d      	bne.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac0:	e02d      	b.n	8002b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f8ce 	bl	8002c64 <I2C_IsAcknowledgeFailed>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e02d      	b.n	8002b2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d021      	beq.n	8002b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ada:	f7fe fe71 	bl	80017c0 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d302      	bcc.n	8002af0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d116      	bne.n	8002b1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f043 0220 	orr.w	r2, r3, #32
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e007      	b.n	8002b2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d1ca      	bne.n	8002ac2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b42:	e02d      	b.n	8002ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f88d 	bl	8002c64 <I2C_IsAcknowledgeFailed>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e02d      	b.n	8002bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5a:	d021      	beq.n	8002ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5c:	f7fe fe30 	bl	80017c0 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d302      	bcc.n	8002b72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e007      	b.n	8002bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d1ca      	bne.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bc4:	e042      	b.n	8002c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b10      	cmp	r3, #16
 8002bd2:	d119      	bne.n	8002c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0210 	mvn.w	r2, #16
 8002bdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e029      	b.n	8002c5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c08:	f7fe fdda 	bl	80017c0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d302      	bcc.n	8002c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d116      	bne.n	8002c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e007      	b.n	8002c5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d1b5      	bne.n	8002bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7a:	d11b      	bne.n	8002cb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f043 0204 	orr.w	r2, r3, #4
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e267      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d075      	beq.n	8002dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ce2:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d00c      	beq.n	8002d08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cee:	4b85      	ldr	r3, [pc, #532]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d112      	bne.n	8002d20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfa:	4b82      	ldr	r3, [pc, #520]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d06:	d10b      	bne.n	8002d20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	4b7e      	ldr	r3, [pc, #504]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d05b      	beq.n	8002dcc <HAL_RCC_OscConfig+0x108>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d157      	bne.n	8002dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e242      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d28:	d106      	bne.n	8002d38 <HAL_RCC_OscConfig+0x74>
 8002d2a:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a75      	ldr	r2, [pc, #468]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e01d      	b.n	8002d74 <HAL_RCC_OscConfig+0xb0>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x98>
 8002d42:	4b70      	ldr	r3, [pc, #448]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a6f      	ldr	r2, [pc, #444]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b6d      	ldr	r3, [pc, #436]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6c      	ldr	r2, [pc, #432]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0xb0>
 8002d5c:	4b69      	ldr	r3, [pc, #420]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a68      	ldr	r2, [pc, #416]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b66      	ldr	r3, [pc, #408]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a65      	ldr	r2, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fd20 	bl	80017c0 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe fd1c 	bl	80017c0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e207      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b5b      	ldr	r3, [pc, #364]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0xc0>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe fd0c 	bl	80017c0 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fe fd08 	bl	80017c0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1f3      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dbe:	4b51      	ldr	r3, [pc, #324]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0xe8>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d063      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dda:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de6:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d11c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df2:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d116      	bne.n	8002e2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_RCC_OscConfig+0x152>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e1c7      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e16:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4937      	ldr	r1, [pc, #220]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	e03a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d020      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e34:	4b34      	ldr	r3, [pc, #208]	; (8002f08 <HAL_RCC_OscConfig+0x244>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fcc1 	bl	80017c0 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e42:	f7fe fcbd 	bl	80017c0 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e1a8      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e54:	4b2b      	ldr	r3, [pc, #172]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e60:	4b28      	ldr	r3, [pc, #160]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4925      	ldr	r1, [pc, #148]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]
 8002e74:	e015      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e76:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <HAL_RCC_OscConfig+0x244>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fca0 	bl	80017c0 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e84:	f7fe fc9c 	bl	80017c0 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e187      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d036      	beq.n	8002f1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_RCC_OscConfig+0x248>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebc:	f7fe fc80 	bl	80017c0 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec4:	f7fe fc7c 	bl	80017c0 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e167      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x200>
 8002ee2:	e01b      	b.n	8002f1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_OscConfig+0x248>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eea:	f7fe fc69 	bl	80017c0 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef0:	e00e      	b.n	8002f10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef2:	f7fe fc65 	bl	80017c0 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d907      	bls.n	8002f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e150      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
 8002f04:	40023800 	.word	0x40023800
 8002f08:	42470000 	.word	0x42470000
 8002f0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f10:	4b88      	ldr	r3, [pc, #544]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ea      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8097 	beq.w	8003058 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2e:	4b81      	ldr	r3, [pc, #516]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10f      	bne.n	8002f5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	4b7d      	ldr	r3, [pc, #500]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	4a7c      	ldr	r2, [pc, #496]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f48:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4a:	4b7a      	ldr	r3, [pc, #488]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f56:	2301      	movs	r3, #1
 8002f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5a:	4b77      	ldr	r3, [pc, #476]	; (8003138 <HAL_RCC_OscConfig+0x474>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d118      	bne.n	8002f98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f66:	4b74      	ldr	r3, [pc, #464]	; (8003138 <HAL_RCC_OscConfig+0x474>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a73      	ldr	r2, [pc, #460]	; (8003138 <HAL_RCC_OscConfig+0x474>)
 8002f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f72:	f7fe fc25 	bl	80017c0 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7a:	f7fe fc21 	bl	80017c0 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e10c      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <HAL_RCC_OscConfig+0x474>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d106      	bne.n	8002fae <HAL_RCC_OscConfig+0x2ea>
 8002fa0:	4b64      	ldr	r3, [pc, #400]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	4a63      	ldr	r2, [pc, #396]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6713      	str	r3, [r2, #112]	; 0x70
 8002fac:	e01c      	b.n	8002fe8 <HAL_RCC_OscConfig+0x324>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b05      	cmp	r3, #5
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x30c>
 8002fb6:	4b5f      	ldr	r3, [pc, #380]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a5e      	ldr	r2, [pc, #376]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	f043 0304 	orr.w	r3, r3, #4
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc2:	4b5c      	ldr	r3, [pc, #368]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	4a5b      	ldr	r2, [pc, #364]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0x324>
 8002fd0:	4b58      	ldr	r3, [pc, #352]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd4:	4a57      	ldr	r2, [pc, #348]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	6713      	str	r3, [r2, #112]	; 0x70
 8002fdc:	4b55      	ldr	r3, [pc, #340]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	4a54      	ldr	r2, [pc, #336]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	f023 0304 	bic.w	r3, r3, #4
 8002fe6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d015      	beq.n	800301c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fe fbe6 	bl	80017c0 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff6:	e00a      	b.n	800300e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff8:	f7fe fbe2 	bl	80017c0 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	; 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e0cb      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300e:	4b49      	ldr	r3, [pc, #292]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0ee      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x334>
 800301a:	e014      	b.n	8003046 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301c:	f7fe fbd0 	bl	80017c0 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003022:	e00a      	b.n	800303a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fe fbcc 	bl	80017c0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e0b5      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303a:	4b3e      	ldr	r3, [pc, #248]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1ee      	bne.n	8003024 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003046:	7dfb      	ldrb	r3, [r7, #23]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d105      	bne.n	8003058 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304c:	4b39      	ldr	r3, [pc, #228]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	4a38      	ldr	r2, [pc, #224]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8003052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003056:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a1 	beq.w	80031a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003062:	4b34      	ldr	r3, [pc, #208]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	2b08      	cmp	r3, #8
 800306c:	d05c      	beq.n	8003128 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d141      	bne.n	80030fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003076:	4b31      	ldr	r3, [pc, #196]	; (800313c <HAL_RCC_OscConfig+0x478>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fe fba0 	bl	80017c0 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe fb9c 	bl	80017c0 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e087      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003096:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	019b      	lsls	r3, r3, #6
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	3b01      	subs	r3, #1
 80030bc:	041b      	lsls	r3, r3, #16
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	491b      	ldr	r1, [pc, #108]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030cc:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_RCC_OscConfig+0x478>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7fe fb75 	bl	80017c0 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030da:	f7fe fb71 	bl	80017c0 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e05c      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x416>
 80030f8:	e054      	b.n	80031a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <HAL_RCC_OscConfig+0x478>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe fb5e 	bl	80017c0 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003108:	f7fe fb5a 	bl	80017c0 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e045      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x444>
 8003126:	e03d      	b.n	80031a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d107      	bne.n	8003140 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e038      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
 8003134:	40023800 	.word	0x40023800
 8003138:	40007000 	.word	0x40007000
 800313c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003140:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <HAL_RCC_OscConfig+0x4ec>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d028      	beq.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d121      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d11a      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003170:	4013      	ands	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003178:	4293      	cmp	r3, r2
 800317a:	d111      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	085b      	lsrs	r3, r3, #1
 8003188:	3b01      	subs	r3, #1
 800318a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800

080031b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0cc      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c8:	4b68      	ldr	r3, [pc, #416]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d90c      	bls.n	80031f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b65      	ldr	r3, [pc, #404]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031de:	4b63      	ldr	r3, [pc, #396]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0b8      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d020      	beq.n	800323e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003208:	4b59      	ldr	r3, [pc, #356]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a58      	ldr	r2, [pc, #352]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003212:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003220:	4b53      	ldr	r3, [pc, #332]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a52      	ldr	r2, [pc, #328]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800322a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322c:	4b50      	ldr	r3, [pc, #320]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	494d      	ldr	r1, [pc, #308]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d044      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	4b47      	ldr	r3, [pc, #284]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d119      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e07f      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d003      	beq.n	8003272 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326e:	2b03      	cmp	r3, #3
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003272:	4b3f      	ldr	r3, [pc, #252]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e06f      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003282:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e067      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003292:	4b37      	ldr	r3, [pc, #220]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f023 0203 	bic.w	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4934      	ldr	r1, [pc, #208]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a4:	f7fe fa8c 	bl	80017c0 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7fe fa88 	bl	80017c0 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e04f      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 020c 	and.w	r2, r3, #12
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d1eb      	bne.n	80032ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d4:	4b25      	ldr	r3, [pc, #148]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d20c      	bcs.n	80032fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ea:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e032      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4916      	ldr	r1, [pc, #88]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	490e      	ldr	r1, [pc, #56]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800333a:	f000 f821 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 800333e:	4602      	mov	r2, r0
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	490a      	ldr	r1, [pc, #40]	; (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	5ccb      	ldrb	r3, [r1, r3]
 800334e:	fa22 f303 	lsr.w	r3, r2, r3
 8003352:	4a09      	ldr	r2, [pc, #36]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe f9ec 	bl	8001738 <HAL_InitTick>

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40023c00 	.word	0x40023c00
 8003370:	40023800 	.word	0x40023800
 8003374:	08005298 	.word	0x08005298
 8003378:	20000010 	.word	0x20000010
 800337c:	20000014 	.word	0x20000014

08003380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003384:	b090      	sub	sp, #64	; 0x40
 8003386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
 800338c:	2300      	movs	r3, #0
 800338e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003390:	2300      	movs	r3, #0
 8003392:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003398:	4b59      	ldr	r3, [pc, #356]	; (8003500 <HAL_RCC_GetSysClockFreq+0x180>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d00d      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x40>
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	f200 80a1 	bhi.w	80034ec <HAL_RCC_GetSysClockFreq+0x16c>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x34>
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d003      	beq.n	80033ba <HAL_RCC_GetSysClockFreq+0x3a>
 80033b2:	e09b      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033b4:	4b53      	ldr	r3, [pc, #332]	; (8003504 <HAL_RCC_GetSysClockFreq+0x184>)
 80033b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033b8:	e09b      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ba:	4b53      	ldr	r3, [pc, #332]	; (8003508 <HAL_RCC_GetSysClockFreq+0x188>)
 80033bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033be:	e098      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c0:	4b4f      	ldr	r3, [pc, #316]	; (8003500 <HAL_RCC_GetSysClockFreq+0x180>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ca:	4b4d      	ldr	r3, [pc, #308]	; (8003500 <HAL_RCC_GetSysClockFreq+0x180>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d028      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d6:	4b4a      	ldr	r3, [pc, #296]	; (8003500 <HAL_RCC_GetSysClockFreq+0x180>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	2200      	movs	r2, #0
 80033de:	623b      	str	r3, [r7, #32]
 80033e0:	627a      	str	r2, [r7, #36]	; 0x24
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033e8:	2100      	movs	r1, #0
 80033ea:	4b47      	ldr	r3, [pc, #284]	; (8003508 <HAL_RCC_GetSysClockFreq+0x188>)
 80033ec:	fb03 f201 	mul.w	r2, r3, r1
 80033f0:	2300      	movs	r3, #0
 80033f2:	fb00 f303 	mul.w	r3, r0, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	4a43      	ldr	r2, [pc, #268]	; (8003508 <HAL_RCC_GetSysClockFreq+0x188>)
 80033fa:	fba0 1202 	umull	r1, r2, r0, r2
 80033fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003400:	460a      	mov	r2, r1
 8003402:	62ba      	str	r2, [r7, #40]	; 0x28
 8003404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003406:	4413      	add	r3, r2
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340c:	2200      	movs	r2, #0
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	61fa      	str	r2, [r7, #28]
 8003412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003416:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800341a:	f7fc ff3f 	bl	800029c <__aeabi_uldivmod>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4613      	mov	r3, r2
 8003424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003426:	e053      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003428:	4b35      	ldr	r3, [pc, #212]	; (8003500 <HAL_RCC_GetSysClockFreq+0x180>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	099b      	lsrs	r3, r3, #6
 800342e:	2200      	movs	r2, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	617a      	str	r2, [r7, #20]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800343a:	f04f 0b00 	mov.w	fp, #0
 800343e:	4652      	mov	r2, sl
 8003440:	465b      	mov	r3, fp
 8003442:	f04f 0000 	mov.w	r0, #0
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	0159      	lsls	r1, r3, #5
 800344c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003450:	0150      	lsls	r0, r2, #5
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	ebb2 080a 	subs.w	r8, r2, sl
 800345a:	eb63 090b 	sbc.w	r9, r3, fp
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800346a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800346e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003472:	ebb2 0408 	subs.w	r4, r2, r8
 8003476:	eb63 0509 	sbc.w	r5, r3, r9
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	00eb      	lsls	r3, r5, #3
 8003484:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003488:	00e2      	lsls	r2, r4, #3
 800348a:	4614      	mov	r4, r2
 800348c:	461d      	mov	r5, r3
 800348e:	eb14 030a 	adds.w	r3, r4, sl
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	eb45 030b 	adc.w	r3, r5, fp
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034a6:	4629      	mov	r1, r5
 80034a8:	028b      	lsls	r3, r1, #10
 80034aa:	4621      	mov	r1, r4
 80034ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034b0:	4621      	mov	r1, r4
 80034b2:	028a      	lsls	r2, r1, #10
 80034b4:	4610      	mov	r0, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ba:	2200      	movs	r2, #0
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	60fa      	str	r2, [r7, #12]
 80034c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034c4:	f7fc feea 	bl	800029c <__aeabi_uldivmod>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4613      	mov	r3, r2
 80034ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_GetSysClockFreq+0x180>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	3301      	adds	r3, #1
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034ea:	e002      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_GetSysClockFreq+0x184>)
 80034ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3740      	adds	r7, #64	; 0x40
 80034f8:	46bd      	mov	sp, r7
 80034fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800
 8003504:	00f42400 	.word	0x00f42400
 8003508:	017d7840 	.word	0x017d7840

0800350c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <HAL_RCC_GetHCLKFreq+0x14>)
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20000010 	.word	0x20000010

08003524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003528:	f7ff fff0 	bl	800350c <HAL_RCC_GetHCLKFreq>
 800352c:	4602      	mov	r2, r0
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	0a9b      	lsrs	r3, r3, #10
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	4903      	ldr	r1, [pc, #12]	; (8003548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800353a:	5ccb      	ldrb	r3, [r1, r3]
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40023800 	.word	0x40023800
 8003548:	080052a8 	.word	0x080052a8

0800354c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003550:	f7ff ffdc 	bl	800350c <HAL_RCC_GetHCLKFreq>
 8003554:	4602      	mov	r2, r0
 8003556:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	0b5b      	lsrs	r3, r3, #13
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4903      	ldr	r1, [pc, #12]	; (8003570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003562:	5ccb      	ldrb	r3, [r1, r3]
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40023800 	.word	0x40023800
 8003570:	080052a8 	.word	0x080052a8

08003574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e03f      	b.n	8003606 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fe f838 	bl	8001610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2224      	movs	r2, #36	; 0x24
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f929 	bl	8003810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b08a      	sub	sp, #40	; 0x28
 8003612:	af02      	add	r7, sp, #8
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	603b      	str	r3, [r7, #0]
 800361a:	4613      	mov	r3, r2
 800361c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b20      	cmp	r3, #32
 800362c:	d17c      	bne.n	8003728 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <HAL_UART_Transmit+0x2c>
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e075      	b.n	800372a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_UART_Transmit+0x3e>
 8003648:	2302      	movs	r3, #2
 800364a:	e06e      	b.n	800372a <HAL_UART_Transmit+0x11c>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2221      	movs	r2, #33	; 0x21
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003662:	f7fe f8ad 	bl	80017c0 <HAL_GetTick>
 8003666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	88fa      	ldrh	r2, [r7, #6]
 800366c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	88fa      	ldrh	r2, [r7, #6]
 8003672:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367c:	d108      	bne.n	8003690 <HAL_UART_Transmit+0x82>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d104      	bne.n	8003690 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	e003      	b.n	8003698 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003694:	2300      	movs	r3, #0
 8003696:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036a0:	e02a      	b.n	80036f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2200      	movs	r2, #0
 80036aa:	2180      	movs	r1, #128	; 0x80
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f840 	bl	8003732 <UART_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e036      	b.n	800372a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10b      	bne.n	80036da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	3302      	adds	r3, #2
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	e007      	b.n	80036ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	781a      	ldrb	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	3301      	adds	r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1cf      	bne.n	80036a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2200      	movs	r2, #0
 800370a:	2140      	movs	r1, #64	; 0x40
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f810 	bl	8003732 <UART_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e006      	b.n	800372a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	e000      	b.n	800372a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003728:	2302      	movs	r3, #2
  }
}
 800372a:	4618      	mov	r0, r3
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b090      	sub	sp, #64	; 0x40
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	4613      	mov	r3, r2
 8003740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003742:	e050      	b.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d04c      	beq.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800374c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <UART_WaitOnFlagUntilTimeout+0x30>
 8003752:	f7fe f835 	bl	80017c0 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800375e:	429a      	cmp	r2, r3
 8003760:	d241      	bcs.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	e853 3f00 	ldrex	r3, [r3]
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003782:	637a      	str	r2, [r7, #52]	; 0x34
 8003784:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e5      	bne.n	8003762 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3314      	adds	r3, #20
 800379c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	613b      	str	r3, [r7, #16]
   return(result);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3314      	adds	r3, #20
 80037b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037b6:	623a      	str	r2, [r7, #32]
 80037b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	69f9      	ldr	r1, [r7, #28]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e5      	bne.n	8003796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e00f      	b.n	8003806 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4013      	ands	r3, r2
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	bf0c      	ite	eq
 80037f6:	2301      	moveq	r3, #1
 80037f8:	2300      	movne	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	429a      	cmp	r2, r3
 8003802:	d09f      	beq.n	8003744 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3740      	adds	r7, #64	; 0x40
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003814:	b0c0      	sub	sp, #256	; 0x100
 8003816:	af00      	add	r7, sp, #0
 8003818:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382c:	68d9      	ldr	r1, [r3, #12]
 800382e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	ea40 0301 	orr.w	r3, r0, r1
 8003838:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800383a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	431a      	orrs	r2, r3
 8003848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	431a      	orrs	r2, r3
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003868:	f021 010c 	bic.w	r1, r1, #12
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003876:	430b      	orrs	r3, r1
 8003878:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800387a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388a:	6999      	ldr	r1, [r3, #24]
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	ea40 0301 	orr.w	r3, r0, r1
 8003896:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4b8f      	ldr	r3, [pc, #572]	; (8003adc <UART_SetConfig+0x2cc>)
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d005      	beq.n	80038b0 <UART_SetConfig+0xa0>
 80038a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4b8d      	ldr	r3, [pc, #564]	; (8003ae0 <UART_SetConfig+0x2d0>)
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d104      	bne.n	80038ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038b0:	f7ff fe4c 	bl	800354c <HAL_RCC_GetPCLK2Freq>
 80038b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038b8:	e003      	b.n	80038c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038ba:	f7ff fe33 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 80038be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038cc:	f040 810c 	bne.w	8003ae8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d4:	2200      	movs	r2, #0
 80038d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038e2:	4622      	mov	r2, r4
 80038e4:	462b      	mov	r3, r5
 80038e6:	1891      	adds	r1, r2, r2
 80038e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80038ea:	415b      	adcs	r3, r3
 80038ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038f2:	4621      	mov	r1, r4
 80038f4:	eb12 0801 	adds.w	r8, r2, r1
 80038f8:	4629      	mov	r1, r5
 80038fa:	eb43 0901 	adc.w	r9, r3, r1
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800390a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800390e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003912:	4690      	mov	r8, r2
 8003914:	4699      	mov	r9, r3
 8003916:	4623      	mov	r3, r4
 8003918:	eb18 0303 	adds.w	r3, r8, r3
 800391c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003920:	462b      	mov	r3, r5
 8003922:	eb49 0303 	adc.w	r3, r9, r3
 8003926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800392a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003936:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800393a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800393e:	460b      	mov	r3, r1
 8003940:	18db      	adds	r3, r3, r3
 8003942:	653b      	str	r3, [r7, #80]	; 0x50
 8003944:	4613      	mov	r3, r2
 8003946:	eb42 0303 	adc.w	r3, r2, r3
 800394a:	657b      	str	r3, [r7, #84]	; 0x54
 800394c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003950:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003954:	f7fc fca2 	bl	800029c <__aeabi_uldivmod>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4b61      	ldr	r3, [pc, #388]	; (8003ae4 <UART_SetConfig+0x2d4>)
 800395e:	fba3 2302 	umull	r2, r3, r3, r2
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	011c      	lsls	r4, r3, #4
 8003966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800396a:	2200      	movs	r2, #0
 800396c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003970:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003974:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003978:	4642      	mov	r2, r8
 800397a:	464b      	mov	r3, r9
 800397c:	1891      	adds	r1, r2, r2
 800397e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003980:	415b      	adcs	r3, r3
 8003982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003984:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003988:	4641      	mov	r1, r8
 800398a:	eb12 0a01 	adds.w	sl, r2, r1
 800398e:	4649      	mov	r1, r9
 8003990:	eb43 0b01 	adc.w	fp, r3, r1
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039a8:	4692      	mov	sl, r2
 80039aa:	469b      	mov	fp, r3
 80039ac:	4643      	mov	r3, r8
 80039ae:	eb1a 0303 	adds.w	r3, sl, r3
 80039b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039b6:	464b      	mov	r3, r9
 80039b8:	eb4b 0303 	adc.w	r3, fp, r3
 80039bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039d4:	460b      	mov	r3, r1
 80039d6:	18db      	adds	r3, r3, r3
 80039d8:	643b      	str	r3, [r7, #64]	; 0x40
 80039da:	4613      	mov	r3, r2
 80039dc:	eb42 0303 	adc.w	r3, r2, r3
 80039e0:	647b      	str	r3, [r7, #68]	; 0x44
 80039e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80039ea:	f7fc fc57 	bl	800029c <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4611      	mov	r1, r2
 80039f4:	4b3b      	ldr	r3, [pc, #236]	; (8003ae4 <UART_SetConfig+0x2d4>)
 80039f6:	fba3 2301 	umull	r2, r3, r3, r1
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2264      	movs	r2, #100	; 0x64
 80039fe:	fb02 f303 	mul.w	r3, r2, r3
 8003a02:	1acb      	subs	r3, r1, r3
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a0a:	4b36      	ldr	r3, [pc, #216]	; (8003ae4 <UART_SetConfig+0x2d4>)
 8003a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a18:	441c      	add	r4, r3
 8003a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a2c:	4642      	mov	r2, r8
 8003a2e:	464b      	mov	r3, r9
 8003a30:	1891      	adds	r1, r2, r2
 8003a32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a34:	415b      	adcs	r3, r3
 8003a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	1851      	adds	r1, r2, r1
 8003a40:	6339      	str	r1, [r7, #48]	; 0x30
 8003a42:	4649      	mov	r1, r9
 8003a44:	414b      	adcs	r3, r1
 8003a46:	637b      	str	r3, [r7, #52]	; 0x34
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a54:	4659      	mov	r1, fp
 8003a56:	00cb      	lsls	r3, r1, #3
 8003a58:	4651      	mov	r1, sl
 8003a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a5e:	4651      	mov	r1, sl
 8003a60:	00ca      	lsls	r2, r1, #3
 8003a62:	4610      	mov	r0, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	4603      	mov	r3, r0
 8003a68:	4642      	mov	r2, r8
 8003a6a:	189b      	adds	r3, r3, r2
 8003a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a70:	464b      	mov	r3, r9
 8003a72:	460a      	mov	r2, r1
 8003a74:	eb42 0303 	adc.w	r3, r2, r3
 8003a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a90:	460b      	mov	r3, r1
 8003a92:	18db      	adds	r3, r3, r3
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a96:	4613      	mov	r3, r2
 8003a98:	eb42 0303 	adc.w	r3, r2, r3
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003aa6:	f7fc fbf9 	bl	800029c <__aeabi_uldivmod>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <UART_SetConfig+0x2d4>)
 8003ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	2164      	movs	r1, #100	; 0x64
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	3332      	adds	r3, #50	; 0x32
 8003ac2:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <UART_SetConfig+0x2d4>)
 8003ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	f003 0207 	and.w	r2, r3, #7
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4422      	add	r2, r4
 8003ad6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ad8:	e105      	b.n	8003ce6 <UART_SetConfig+0x4d6>
 8003ada:	bf00      	nop
 8003adc:	40011000 	.word	0x40011000
 8003ae0:	40011400 	.word	0x40011400
 8003ae4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aec:	2200      	movs	r2, #0
 8003aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003af2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003af6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003afa:	4642      	mov	r2, r8
 8003afc:	464b      	mov	r3, r9
 8003afe:	1891      	adds	r1, r2, r2
 8003b00:	6239      	str	r1, [r7, #32]
 8003b02:	415b      	adcs	r3, r3
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b0a:	4641      	mov	r1, r8
 8003b0c:	1854      	adds	r4, r2, r1
 8003b0e:	4649      	mov	r1, r9
 8003b10:	eb43 0501 	adc.w	r5, r3, r1
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	00eb      	lsls	r3, r5, #3
 8003b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b22:	00e2      	lsls	r2, r4, #3
 8003b24:	4614      	mov	r4, r2
 8003b26:	461d      	mov	r5, r3
 8003b28:	4643      	mov	r3, r8
 8003b2a:	18e3      	adds	r3, r4, r3
 8003b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b30:	464b      	mov	r3, r9
 8003b32:	eb45 0303 	adc.w	r3, r5, r3
 8003b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b56:	4629      	mov	r1, r5
 8003b58:	008b      	lsls	r3, r1, #2
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b60:	4621      	mov	r1, r4
 8003b62:	008a      	lsls	r2, r1, #2
 8003b64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b68:	f7fc fb98 	bl	800029c <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4b60      	ldr	r3, [pc, #384]	; (8003cf4 <UART_SetConfig+0x4e4>)
 8003b72:	fba3 2302 	umull	r2, r3, r3, r2
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	011c      	lsls	r4, r3, #4
 8003b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	464b      	mov	r3, r9
 8003b90:	1891      	adds	r1, r2, r2
 8003b92:	61b9      	str	r1, [r7, #24]
 8003b94:	415b      	adcs	r3, r3
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	1851      	adds	r1, r2, r1
 8003ba0:	6139      	str	r1, [r7, #16]
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	414b      	adcs	r3, r1
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bb4:	4659      	mov	r1, fp
 8003bb6:	00cb      	lsls	r3, r1, #3
 8003bb8:	4651      	mov	r1, sl
 8003bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bbe:	4651      	mov	r1, sl
 8003bc0:	00ca      	lsls	r2, r1, #3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4642      	mov	r2, r8
 8003bca:	189b      	adds	r3, r3, r2
 8003bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	460a      	mov	r2, r1
 8003bd4:	eb42 0303 	adc.w	r3, r2, r3
 8003bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003be6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	008b      	lsls	r3, r1, #2
 8003bf8:	4641      	mov	r1, r8
 8003bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bfe:	4641      	mov	r1, r8
 8003c00:	008a      	lsls	r2, r1, #2
 8003c02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c06:	f7fc fb49 	bl	800029c <__aeabi_uldivmod>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4b39      	ldr	r3, [pc, #228]	; (8003cf4 <UART_SetConfig+0x4e4>)
 8003c10:	fba3 1302 	umull	r1, r3, r3, r2
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	2164      	movs	r1, #100	; 0x64
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	3332      	adds	r3, #50	; 0x32
 8003c22:	4a34      	ldr	r2, [pc, #208]	; (8003cf4 <UART_SetConfig+0x4e4>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c2e:	441c      	add	r4, r3
 8003c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c34:	2200      	movs	r2, #0
 8003c36:	673b      	str	r3, [r7, #112]	; 0x70
 8003c38:	677a      	str	r2, [r7, #116]	; 0x74
 8003c3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c3e:	4642      	mov	r2, r8
 8003c40:	464b      	mov	r3, r9
 8003c42:	1891      	adds	r1, r2, r2
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	415b      	adcs	r3, r3
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c4e:	4641      	mov	r1, r8
 8003c50:	1851      	adds	r1, r2, r1
 8003c52:	6039      	str	r1, [r7, #0]
 8003c54:	4649      	mov	r1, r9
 8003c56:	414b      	adcs	r3, r1
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c66:	4659      	mov	r1, fp
 8003c68:	00cb      	lsls	r3, r1, #3
 8003c6a:	4651      	mov	r1, sl
 8003c6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c70:	4651      	mov	r1, sl
 8003c72:	00ca      	lsls	r2, r1, #3
 8003c74:	4610      	mov	r0, r2
 8003c76:	4619      	mov	r1, r3
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4642      	mov	r2, r8
 8003c7c:	189b      	adds	r3, r3, r2
 8003c7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c80:	464b      	mov	r3, r9
 8003c82:	460a      	mov	r2, r1
 8003c84:	eb42 0303 	adc.w	r3, r2, r3
 8003c88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	663b      	str	r3, [r7, #96]	; 0x60
 8003c94:	667a      	str	r2, [r7, #100]	; 0x64
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	008b      	lsls	r3, r1, #2
 8003ca6:	4641      	mov	r1, r8
 8003ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cac:	4641      	mov	r1, r8
 8003cae:	008a      	lsls	r2, r1, #2
 8003cb0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003cb4:	f7fc faf2 	bl	800029c <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <UART_SetConfig+0x4e4>)
 8003cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	2164      	movs	r1, #100	; 0x64
 8003cc6:	fb01 f303 	mul.w	r3, r1, r3
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	3332      	adds	r3, #50	; 0x32
 8003cd0:	4a08      	ldr	r2, [pc, #32]	; (8003cf4 <UART_SetConfig+0x4e4>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	f003 020f 	and.w	r2, r3, #15
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4422      	add	r2, r4
 8003ce4:	609a      	str	r2, [r3, #8]
}
 8003ce6:	bf00      	nop
 8003ce8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003cec:	46bd      	mov	sp, r7
 8003cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf2:	bf00      	nop
 8003cf4:	51eb851f 	.word	0x51eb851f

08003cf8 <__libc_init_array>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	4d0d      	ldr	r5, [pc, #52]	; (8003d30 <__libc_init_array+0x38>)
 8003cfc:	4c0d      	ldr	r4, [pc, #52]	; (8003d34 <__libc_init_array+0x3c>)
 8003cfe:	1b64      	subs	r4, r4, r5
 8003d00:	10a4      	asrs	r4, r4, #2
 8003d02:	2600      	movs	r6, #0
 8003d04:	42a6      	cmp	r6, r4
 8003d06:	d109      	bne.n	8003d1c <__libc_init_array+0x24>
 8003d08:	4d0b      	ldr	r5, [pc, #44]	; (8003d38 <__libc_init_array+0x40>)
 8003d0a:	4c0c      	ldr	r4, [pc, #48]	; (8003d3c <__libc_init_array+0x44>)
 8003d0c:	f000 f820 	bl	8003d50 <_init>
 8003d10:	1b64      	subs	r4, r4, r5
 8003d12:	10a4      	asrs	r4, r4, #2
 8003d14:	2600      	movs	r6, #0
 8003d16:	42a6      	cmp	r6, r4
 8003d18:	d105      	bne.n	8003d26 <__libc_init_array+0x2e>
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d20:	4798      	blx	r3
 8003d22:	3601      	adds	r6, #1
 8003d24:	e7ee      	b.n	8003d04 <__libc_init_array+0xc>
 8003d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2a:	4798      	blx	r3
 8003d2c:	3601      	adds	r6, #1
 8003d2e:	e7f2      	b.n	8003d16 <__libc_init_array+0x1e>
 8003d30:	080052b8 	.word	0x080052b8
 8003d34:	080052b8 	.word	0x080052b8
 8003d38:	080052b8 	.word	0x080052b8
 8003d3c:	080052bc 	.word	0x080052bc

08003d40 <memset>:
 8003d40:	4402      	add	r2, r0
 8003d42:	4603      	mov	r3, r0
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d100      	bne.n	8003d4a <memset+0xa>
 8003d48:	4770      	bx	lr
 8003d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4e:	e7f9      	b.n	8003d44 <memset+0x4>

08003d50 <_init>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	bf00      	nop
 8003d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d56:	bc08      	pop	{r3}
 8003d58:	469e      	mov	lr, r3
 8003d5a:	4770      	bx	lr

08003d5c <_fini>:
 8003d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5e:	bf00      	nop
 8003d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d62:	bc08      	pop	{r3}
 8003d64:	469e      	mov	lr, r3
 8003d66:	4770      	bx	lr
